/*
 Navicat Premium Data Transfer

 Source Server         : mysql
 Source Server Type    : MySQL
 Source Server Version : 50720
 Source Host           : localhost:3306
 Source Schema         : blog_db

 Target Server Type    : MySQL
 Target Server Version : 50720
 File Encoding         : 65001

 Date: 03/06/2020 16:25:29
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for tb_blog
-- ----------------------------
DROP TABLE IF EXISTS `tb_blog`;
CREATE TABLE `tb_blog`  (
  `blog_id` int(20) NOT NULL AUTO_INCREMENT COMMENT '博客表主键id',
  `blog_title` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客标题',
  `blog_cover_image` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客封面图',
  `blog_content` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客内容',
  `blog_category_id` int(11) NOT NULL COMMENT '博客分类id',
  `blog_category_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客分类(冗余字段)',
  `blog_tags` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客标签',
  `blog_summary` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客摘要',
  `blog_status` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'draft' COMMENT 'draft-草稿 published-发布 deleted-删除',
  `blog_visits` bigint(20) NOT NULL DEFAULT 0 COMMENT '阅读量',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '添加时间',
  `update_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`blog_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 18 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_blog
-- ----------------------------
INSERT INTO `tb_blog` VALUES (1, '线程池是怎么工作的呢？', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%91%A2/wallhaven-g8g6re.png', '# 前言\n\n对线程池是如何实现的很感兴趣，就从execute（）方法开始！\n\n\n\n关于本篇内容，首先你得对线程池的**参数及对应的工作过程**有了一定的了解，这里简单介绍下：\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler)\n```\n\n**其中重点是：corePoolSize、workQueue、maxPoolSize这3个参数**\n\ncorePoolSize：核心线程数，当工作线程数小于核心线程数且没有空闲线程时，新来的任务都会生成新的线程去处理\n\nmaxPoolSize：最大线程数，对于某些情况下任务量徒增导致workQueue队列已满则会在线程数小于maxPoolSize时增加新的工作线程处理任务直到达到maxPoolSize大小，若还不行，则执行拒绝策略\n\nkeepAliveTime：存活时间，当线程数大于corePoolSize时回收空闲时间到达keepAliveTime的线程直到线程数回到corePoolSize\n\nworkQueue：工作队列，当核心线程数已满且都在工作时，新来的任务不再产生新的线程而是进入工作队列等待线程空闲，**当队列已满后若线程数小于maxPoolSize才会开新线程处理突增的任务**\n\nthreadFactory：线程工厂，生产线程的。通常使用默认的即可，有特殊需求如线程名之类的可以自定义\n\nHandler：拒绝策略，四种拒绝策略如下：\n\n1. AbortPolicy：丢弃任务并抛出RejectedExecutionException异常\n2. DiscardPolicy：丢弃任务不抛出异常\n3. DiscardOldestPolicy：丢弃最老的任务，重新尝试执行该任务（重复）\n4. CallerRunsPolicy：调用者执行\n\n# execute（）一探究竟\n\n双击shift搜ThreadPoolExecutor类，再在该类中找到execute（）方法！开干\n\n```java\n    public void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n        int c = ctl.get();\n        if (workerCountOf(c) < corePoolSize) {\n            if (addWorker(command, true))\n                return;\n            c = ctl.get();\n        }\n        if (isRunning(c) && workQueue.offer(command)) {\n            int recheck = ctl.get();\n            if (! isRunning(recheck) && remove(command))\n                reject(command);\n            else if (workerCountOf(recheck) == 0)\n                addWorker(null, false);\n        }\n        else if (!addWorker(command, false))\n            reject(command);\n    }\n```\n\n一条条来看，第一个If是空值校验；紧接其后，然后这个c的值是什么呢？按住ctl找到`private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));`，是个原子变量，然后呢？干嘛的？看上面的注释（类下方）大概意思是：**最主要的线程池控制变量，包括两个字段：工作线程数和线程池状态。**\n\n\n\nOK，所以c中就存储了线程池现在的工作线程数和线程池状态，下一个if如果**工作线程数小于核心线程数**，调用addWorker（）方法，如果返回值是true，就直接return了？一个execute（）流程就结束了？？？那就先来看addWorker方法，详见下方addWorker（）招兵买马\n\n\n\n**这里接addWorker（）中状态为SHUTDOWN依然添加线程：**可以看到在execute（）中是调用了Runnable参数为null方法的，在工作线程为0的时候防止没有线程处理遗留的任务（SHUTDOWN状态需要处理这些任务），这里感觉理解的比较片面（或错误），不知道较准确的说法是什么\n\n\n\n**execute（）一句话总结：execute（）就是控制整个线程池工作的流程，其他的创建线程和任务执行都有各自的方法**\n\n# addWorker（）招兵买马\n\naddWorker（）源码比较长，分两部分来看，第一部分：\n\n```java\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n		retry:\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n            if (rs >= SHUTDOWN &&\n                ! (rs == SHUTDOWN &&\n                   firstTask == null &&\n                   ! workQueue.isEmpty()))\n                return false;\n\n            for (;;) {\n                int wc = workerCountOf(c);\n                if (wc >= CAPACITY ||\n                    wc >= (core ? corePoolSize : maximumPoolSize))\n                    return false;\n                if (compareAndIncrementWorkerCount(c))\n                    break retry;\n                c = ctl.get();  \n                if (runStateOf(c) != rs)\n                    continue retry;\n            }\n        }\n```\n\n大体是两个for循环，先看第一个if判断，前一个 rs >= SHUTDOWN大致知道是状态非RUNNING时不再接受任务，return false，那第二个非判断里的三个与判断是什么情况呢？\n\n\n\n找特殊情况，也就是if（true  && ! （true && true && true））最后整体就是false，也就是会继续走下面的添加线程流程，这里就有疑问了，三个true里第一个true（rs == SHUTDOWN），明明状态都是SHUTDOWN了，这时候怎么还能有添加线程呢？再看后两个判断（firstTast == null && ！workQueue.isEmpty（））**传进来的任务是空然后工作队列不为空**。好像明白了什么，**SHUTDOWN时会先把所有任务消耗完毕，是需要消耗任务的，消耗任务就需要线程**。那什么时候调用呢？这得回到上文execute（）\n\n\n\n接着往下看，里层for循环大概就是以原子的方式增加线程池的数量，如果增加失败会重试（每次会重新检查状态）\n\n\n\n**到这里线程池中控制变量中的线程数状态已经+1了，而实际创建线程和执行就在下半部分：**\n\n```java\n        boolean workerStarted = false;\n        boolean workerAdded = false;\n        Worker w = null;\n        try {\n            w = new Worker(firstTask);\n            final Thread t = w.thread;\n            if (t != null) {\n                final ReentrantLock mainLock = this.mainLock;\n                mainLock.lock();\n                try {\n                    int rs = runStateOf(ctl.get());\n\n                    if (rs < SHUTDOWN ||\n                        (rs == SHUTDOWN && firstTask == null)) {\n                        if (t.isAlive()) // precheck that t is startable\n                            throw new IllegalThreadStateException();\n                        workers.add(w);\n                        int s = workers.size();\n                        if (s > largestPoolSize)\n                            largestPoolSize = s;\n                        workerAdded = true;\n                    }\n                } finally {\n                    mainLock.unlock();\n                }\n                if (workerAdded) {\n                    t.start();\n                    workerStarted = true;\n                }\n            }\n        } finally {\n            if (! workerStarted)\n                addWorkerFailed(w);\n        }\n        return workerStarted;\n}\n```\n\n看到下面那个t.start（）方法就知道这里就启动了线程，启动的是Worker类中的thread线程遍历，那再来看看Worker类又是怎么一回事\n\n\n\n# Worker勤恳工人\n\n```java\nprivate final class Worker\n    extends AbstractQueuedSynchronizer\n    implements Runnable\n{\n        final Thread thread;\n        \n        Runnable firstTask;\n\n        Worker(Runnable firstTask) {\n            setState(-1); // inhibit interrupts until runWorker\n            this.firstTask = firstTask;\n            this.thread = getThreadFactory().newThread(this);\n        }\n\n        public void run() {\n            runWorker(this);\n        }\n}\n```\n\n只截取了部分源码。只提供一个带Runnable接口（任务）参数的构造器，然后调用线程工厂的来创建线程（详见DefaultThreadFactory默认工厂）\n\n在addWorker（）中启动了thread线程变量，而该变量又是以自己（Worker）为Runnable创建的线程（详见DefaultThreadFactory工厂招人）\n\n所以实际也就是调用的Worker中的run方法，run（）方法只是调用了runWorker（），看来具体执行的流程就在该方法中，详见runWorker（）勤恳工作\n\n\n\n## DefaultThreadFactory工厂招人\n\n如果定义ThreadPoolExecutor时没有指定线程工厂，会使用Executors工具类中的DefaultThreadFactory类来作为默认的线程工厂创建线程\n\n```java\n    static class DefaultThreadFactory implements ThreadFactory {\n        private static final AtomicInteger poolNumber = new AtomicInteger(1);\n        private final ThreadGroup group;\n        private final AtomicInteger threadNumber = new AtomicInteger(1);\n        private final String namePrefix;\n\n        DefaultThreadFactory() {\n            SecurityManager s = System.getSecurityManager();\n            group = (s != null) ? s.getThreadGroup() :\n                                  Thread.currentThread().getThreadGroup();\n            namePrefix = \"pool-\" +\n                          poolNumber.getAndIncrement() +\n                         \"-thread-\";\n        }\n\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(group, r,\n                                  namePrefix + threadNumber.getAndIncrement(),\n                                  0);\n            if (t.isDaemon())\n                t.setDaemon(false);\n            if (t.getPriority() != Thread.NORM_PRIORITY)\n                t.setPriority(Thread.NORM_PRIORITY);\n            return t;\n        }\n    }\n```\n\n看到newThread（）方法里第一句`Thread t = new Thread（group, r,...）`刚好Worker类的构造器中就调用了该方法，**说明此时已经创建好了工作线程，且Runnable是Worker自己**\n\n# runWorker（）勤恳工作\n\n```java\n    final void runWorker(Worker w) {\n        Thread wt = Thread.currentThread();\n        Runnable task = w.firstTask;\n        w.firstTask = null;\n        w.unlock(); // allow interrupts\n        boolean completedAbruptly = true;\n        try {\n            while (task != null || (task = getTask()) != null) {\n                w.lock();\n                // If pool is stopping, ensure thread is interrupted;\n                // if not, ensure thread is not interrupted.  This\n                // requires a recheck in second case to deal with\n                // shutdownNow race while clearing interrupt\n                if ((runStateAtLeast(ctl.get(), STOP) ||\n                     (Thread.interrupted() &&\n                      runStateAtLeast(ctl.get(), STOP))) &&\n                    !wt.isInterrupted())\n                    wt.interrupt();\n                try {\n                    beforeExecute(wt, task);\n                    Throwable thrown = null;\n                    try {\n                        task.run();\n                    } catch (RuntimeException x) {\n                        thrown = x; throw x;\n                    } catch (Error x) {\n                        thrown = x; throw x;\n                    } catch (Throwable x) {\n                        thrown = x; throw new Error(x);\n                    } finally {\n                        afterExecute(task, thrown);\n                    }\n                } finally {\n                    task = null;\n                    w.completedTasks++;\n                    w.unlock();\n                }\n            }\n            completedAbruptly = false;\n        } finally {\n            processWorkerExit(w, completedAbruptly);\n        }\n    }\n```\n\n最主要还是看里面的try语句，看到`task.run（）`终于找到run方法了，然后可以清楚的看到在调用run方法前后分别调用了两个钩子函数beforeExecute和afterExecute~\n\n\n\n然后线程池怎么实现的线程复用呢？就在`while (task != null || (task = getTask()) != null)`中，**详见getTask（）接受任务**，若是核心线程会在队列为空的时候getTask中被阻塞，线程也就不会停止，并且while会一直循环\n\n\n\n# getTask（）接受任务\n\n```java\n    private Runnable getTask() {\n        boolean timedOut = false; // Did the last poll() time out?\n\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n\n            // Check if queue empty only if necessary.\n            if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n                decrementWorkerCount();\n                return null;\n            }\n\n            int wc = workerCountOf(c);\n\n            // Are workers subject to culling?\n            boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n            if ((wc > maximumPoolSize || (timed && timedOut))\n                && (wc > 1 || workQueue.isEmpty())) {\n                if (compareAndDecrementWorkerCount(c))\n                    return null;\n                continue;\n            }\n\n            try {\n                Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n                if (r != null)\n                    return r;\n                timedOut = true;\n            } catch (InterruptedException retry) {\n                timedOut = false;\n            }\n        }\n    }\n```\n\n看到最后的try语句返回r的三目运算符，timed是在上面定义的一个标志是否所有线程还是只有超过核心线程的线程可以被收回的一个标记，**只会将工作队列有任务且取出任务返回，其余要么阻塞要么标记timeOut在下次循环再做判断**\n\n\n\n# 总结\n\n不知道有没有说明白，感觉再怎么说也比不过自己看源码去**解惑**来得更舒适\n\n最后说说我看源码后解的惑吧：\n\n1. 核心线程和非核心线程都只是概念上的，**每个线程中并没有一个标记位标记是否为核心线程**\n2. 线程的复用和超时回收是通过BlockingQueue的take（）和poll(long timeout, TimeUnit unit)方法分别实现的\n3. 使用execute提交Runnable任务和使用submit提交Callable本质上还是`new Thread（Runnable）`和`new FutureTask（Callable）`，**我们只需关心任务，将线程的管理完全交给了线程池**', 1, 'Java', 'Java,线程池', '一直对线程池是怎么就简单的只需要提交一个任务其他所有如线程的复用和任务的执行一切的一切都还是疑问，按住Ctrl进入execute()方法一探究竟', 'published', 31, '2020-03-05 10:21:28', '2020-05-24 16:09:09');
INSERT INTO `tb_blog` VALUES (2, 'Java集合与懒加载', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/Java%E9%9B%86%E5%90%88%E4%B8%8E%E6%87%92%E5%8A%A0%E8%BD%BD%2F2345220200408.jpg', '# 开门见山\n\n> 本篇内容需要你对JDK8的ArrayList和HashMap源码有大致了解，也可以跟随本例开始对ArrayList和HashMap源码的探索\n\n不看源码，先来看看ArrayList和HashMap的实际表现吧：\n\n```java\n        List<String> list = new ArrayList<>();//elementeData = [Object[0]@529]\n        List<String> list1 = new ArrayList<>(10);//elementeData = [Object[10]@530]\n		List<String> list2 = new ArrayList<>(list1);//elementeData = [Object[0]@531]\n        Map<String, String> map = new HashMap<>();//table = null\n        Map<String, String> map1 = new HashMap<>(10);//table = null\n		Map<String, String> map2 = new HashMap<>(map1);//table = null\n```\n\n> elementeData和table分别是ArrayList和HashMap实际存储数据的数据结构\n>\n> 懒加载：前端很多地方就有懒加载如图片懒加载，Vue路由懒加载等等；后端中单例模式的懒汉式也是为了解决饿汉式不能懒加载而产生的新方法。懒加载能使资源被更加合理的运用，整个过程变得更加优雅\n>\n> 而Java集合中的懒加载则体现在：在集合容器初始化（调用构造器但还未添加元素）时并不会为容器分配内存空间，只有在真正开始添加后才分配内存，如上面的Object[0]与Object[10]\n\n\n\n可以明显的看到ArrayList和HashMap确确实实是实现了懒加载，不过还是有几点细微的**不同**：\n\n1. list1似乎并没有实现懒加载，**你需求多少空间马上就给你分配了**。而HashMap却很有“原则”：**只要你不添加元素，我就是不给你分配内存**\n2. 而且ArrayList似乎没有HashMap那么“懒”，它好歹还给容器连接了一个对象（Object数组），而HashMap直接就是null\n\n\n\n# ArrayList是如何实现懒加载的\n\n这是ArrayList的**无参构造器**：\n\n```java\n	private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n	public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n```\n\n就是内置了一个**长度为0的Object静态常量数组（DEFAULTCAPACITY_EMPTY_ELEMENTDATA）作为初始化时的容器并以此容器判断是否是无参构造器**，然后再看ArrayList在**put时计算需求容量**的方法：\n\n```java\n    private static final int DEFAULT_CAPACITY = 10;\n	private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        // 判断是不是调用的无参构造器\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        // minCapacity是最小需求容量，该值会与当前容量做比较判断是否需要扩容\n        return minCapacity;\n    }\n```\n\n`DEFAULTCAPACITY_EMPTY_ELEMENTDATA`与上面无参构造器的对象一致，说明ArrayList在用户不知道具体要存多少数据时，会将需求容量设置为10。ArryayList还提供了putAll方法，所以第一次添加时minCapacity是有可能大于10的，所以要取两者最大值\n\n\n\n**而你如果不是调用的无参构造器是不会给你设置默认容量的**，就比如开门见山中的list2，添加一个元素后elementDate的容量就是1，感觉就是ArrayList**有自己的兜底策略，但绝不会干预你的决定**\n\n\n\n# HashMap是如何实现懒加载的\n\n看起来HashMap的懒加载实现的比ArrayList更理想，也来看看源码吧：\n\nHashMap提供了4个构造器，而这四个构造器最后都会类似有这么一句：\n\n```java\n	this.threshold = tableSizeFor(initialCapacity)\n```\n\n`tableSizeFor（）`方法看注释大概知道是会返回一个比参数大的最小2次幂数（关于tableSizeFor是如何计算出该数以及为什么HashMap的容量大小要求2次幂网上有很多优秀的内容，不是本篇的主要内容），那么**为什么要把预期容量赋值给扩容阈值`threshold`呢**？（扩容机制及阈值属性也不多介绍）扩容阈值不是用来判断扩容的吗？这样不是乱套了吗？\n\n\n\n**带着该疑惑看到putVal（）方法：**\n\n```java\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        //只截取了和懒加载相关部分\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        ......\n    }\n```\n\n看这最开头的if判断，就是在这里**对“懒”进行判断然后到了不得不分配内存了**（table==null或者table长度为0），table被赋值为resize（）方法返回的数组对象了，再看看resize（）方法\n\n```java\n    final Node<K,V>[] resize() {\n        //只截取了和懒加载相关部分\n        Node<K,V>[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap > 0) {\n            if (oldCap >= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        else {               // zero initial threshold signifies using defaults\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n        threshold = newThr;\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n            Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n        ......\n    }\n```\n\n多看几遍代码就会发现resize专门针对懒加载有特定的处理逻辑的，就是当oldCap == 0时，如果oldThr > 0，则新容量是oldThr（就是threshold），而后针对该情况（newThr == 0）又重新计算扩容阈值，可以说就是**将threshold作为了临时的容量变量**；如果oldThr == 0，说明没有传入初始容量，使用默认的容量和扩容阈值\n\n最后再将新的数组返回，至此一次懒加载过程就结束了\n\n\n\n> 在看HashMap用集合做参数的构造器中发现HashMap是这么用扩容阈值来求容量的：((float)s / loadFactor) + 1.0F；\n\n\n\n# 细微差别解惑\n\n**1、为什么ArrayList（int）不能实现懒加载：**\n\n参考HashMap（int）之所以能够实现理想的懒加载，**是因为它可以有一个用作临时存储初始化容量的变量threshold**，能够在懒加载时**明确**的知道用户想要的初始化容量。而ArrayList似乎并没有一个合适的变量这么做\n\n\n\n**2、null和array[0]的区别**\n\n这个目前我也不知道具体有什么大的区别，体现在代码层面似乎也就只是一句`length = array == null ? 0 : array.length`的转换就足够了\n\n', 1, 'Java', 'Java,集合', '就Java集合中的ArrayList和HashMap聊一聊它们是如何实现懒加载以及一些细微的差别', 'published', 24, '2019-12-28 11:25:17', '2020-04-08 11:25:17');
INSERT INTO `tb_blog` VALUES (3, '真人CS小Demo', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E7%9C%9F%E4%BA%BACS%E5%B0%8FDemo%2F4121120200408.jpg', '# 前言\n\n最近学习了一下控制并发流程的几个JUC包下的类，又想起来之前在《码出高效：Java开发手册》中对于ThreadLocal类讲解时用到了一个真人CS的例子。**想着自己也搞一个类似的小Demo，以下是大致思路：**\n\n1. 使用线程池来管理10个玩家（分两队）线程的执行\n2. 使用2个CountDownLatch来分别对应队伍1和队伍2的存活数\n3. 玩家初始生命值为100，每过一定秒数减少1-20的血量，某队伍5人皆死亡则游戏结束\n\n\n\n# 代码\n\n```java\npublic class CsGameDemo {\n    private static final int PLAYER_HP = 100;\n    private static final int MAX_DAMAGE = 20;\n    private static CountDownLatch group1 = new CountDownLatch(5);\n    private static CountDownLatch group2 = new CountDownLatch(5);\n    private static final ThreadLocal<Integer> LIFE_VALUE = new ThreadLocal<Integer>(){\n        @Override\n        protected Integer initialValue() {\n            return PLAYER_HP;\n        }\n    };\n\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        for (int i = 0; i < 10; i++) {\n            executorService.execute(new Player(i < 5 ? 0 : 1, i));\n        }\n        try {\n            group1.await();\n            group2.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"游戏结束\");\n    }\n\n    static class Player implements Runnable{\n        private int group;\n        private int id;\n\n        public Player(int group, int id) {\n            this.group = group;\n            this.id = id;\n        }\n\n        @Override\n        public void run() {\n            int initLife = LIFE_VALUE.get();\n            Random random = new Random();\n            while(!isGameOver() && (initLife -= (random.nextInt(MAX_DAMAGE) + 1)) > 0){\n                try {\n                    System.out.println(group + \"组第\" + id + \"号玩家当前血量为：\" + initLife);\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            System.out.println(group + \"组第\" + id + \"号玩家最后血量为：\" + initLife);\n            countDown();\n            LIFE_VALUE.remove();\n        }\n        private boolean isGameOver(){\n            return group1.getCount() == 0 || group2.getCount() == 0;\n        }\n        private void countDown(){\n            if(group == 0){\n                group1.countDown();\n            }else{\n                group2.countDown();\n            }\n            return;\n        }\n    }\n}\n```\n\n\n\n**说明：**\n\n1. 线程池使用的是Executors工具类的固定线程池，线程数为10\n2. 玩家类实现了Runnable接口，run方法中会循环判断将玩家生命减少1-20之间并判断是否生命值有效并且游戏是否已经结束，两者只要有一个满足皆会减少对应队伍的CountDownLatch数\n3. 通过isGameOver（）方法保证了即使主线程因group1而阻塞同时group2的state数为0而不能正确唤醒主线程\n\n> 执行结果是符合预期的能够在**其中任意一队已经全部“死亡”的情况下成功“结束游戏”**\n\n\n\n# 一些思考\n\n写完之后我感觉即使不使用ThreadLocal，initLife变量是**局部变量**只要在外部定义一个常量一样可以在每个线程**内有一份独立的内存**（详见JVM内存结构栈帧相关）。然后我也试着修改了run方法中initLife变量直接赋值为上面定义的常量100，也是可以按照预期来完成的（所以对于书上关于非共享时需使用ThreadLocal的动机我暂时存疑）。\n\n\n\n书上也有说ThreadLocal适用于一些非线程安全的工具类（如SimpleDateFormate）\n\n\n\n所以，似乎本例和ThreadLocal关系也不大，主要靠线程池和CountDownLatch~然后做点引申，也是自己的一个疑问\n\n## ThreadLocal是如何实现的\n\n对于ThreadLocal是如何实现在每个线程中都保有一份内存的原理存疑~来解解惑\n\n先来看看ThreadLocal的get（）方法及相关方法\n\n```java\n    public T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();\n    }\n    ThreadLocalMap getMap(Thread t) {\n        return t.threadLocals;\n    }\n    private T setInitialValue() {\n        T value = initialValue();\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n        return value;\n    }\n```\n\n1. 获取到当前线程的threadLocals属性值，该值是一个ThreadLocalMap（**ThreadLocal的内部类，看名字知道是一个存储键值对的Map,key是ThreadLocal对象，value是设置的值**）类，最开始该属性值为null，走setInitialValue（）方法\n2. setInitialValue（）方法会在map为null时**创建map并把本ThreadLocal作为key，initValue方法的返回值作为Value存入ThreadLocalMap中**，最后返回该value\n3. 至此，本例中的一次get操作流程就走完了\n\n\n\n**在查看源码时我发现以下几点：**\n\n1. ThreadLocal的initialValue方法只有在get时才会调用，若没有重写该方法则会返回null\n2. ThreadLocal可以有两种初始化，一种是重写initialValue，在get时会创建ThreadLocalMap。另一种是set（T value）时创建ThreadLocalMap\n\n\n\n**关于ThreadLocal的使用需注意以下几点：**\n\n1. 脏数据：因为线程池会复用Thread，所以也会复用其中的ThreadLocalMap，如果后来的任务因为某些原因没有调用set方法重置ThreadLocalMap中的值，则会沿用上一个任务中设置的值，就造成了脏数据\n2. 内存泄漏：ThreadLocalMap中的key继承了弱引用，希望借住弱引用机制来帮助GC。但如果使用static修饰ThreadLocal对象，则该弱引用会一直被持有即使为null也不会GC，然后导致内存泄漏，所以在每次使用完ThreadLocal对象后要及时调用remove（）以防内存泄漏\n\n# 参考\n\n- 杨冠宝，高海慧. 码出高效：Java开发手册 [M]. 电子工业出版社, 2018.', 1, 'Java', 'Java', '本例主要用到了线程池、CountDownLatch、ThreadLocal来模拟一场5V5的真人CS的小DEMO', 'published', 15, '2020-04-08 11:28:59', '2020-04-08 11:28:59');
INSERT INTO `tb_blog` VALUES (4, 'SpringBoot整合Elasticsearch和Redis', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/SpringBoot%E6%95%B4%E5%90%88Elasticsearch%E5%92%8CRedis%2F1535220200412.jpg', '# 使用场景\n\nElasticsearch的使用场景最常见的是检索，在我的博客项目中就有用到ES来做博客检索，我没测试使用MySQL全文索引和ES的数据差距，不过[Springboot + ElasticSearch 构建博客检索系统](https://www.imooc.com/learn/1161)这门免费课有测试将秒级的查询提升到了毫秒级，对于如何同步MySQL数据到ES中我也是先观看的该视频入门，不同的是ES7的变化和我一些新的需求\n\n\n\nRedis的使用场景我这里只是用作缓存，且缓存的数据并不需要同步数据库，是由数据库数据产生的统计数据\n\n# SpringBoot整合ES\n\n首先，先在官网[https://www.elastic.co/cn/elasticsearch](https://www.elastic.co/cn/elasticsearch)下好ELK（Elasticsearch，Logstash，Kibana）的相同版本文件，我是下载的7.4.2的windows版本\n\n下载好后，**ES与Kibana可以直接点击bin目录的组件名.bat启动**，Logstash复杂点，因为它是沟通MySQL和ES的“桥梁”，你得先配置好这一“桥梁”才能顺利连接，首先把`mysql-connector-java-5.1.46.jar`jar包放到`logstash-7.4.2\\logstash-core\\lib\\jars`目录下，再在Logstash的bin目录下创建mysql文件夹，在该文件夹中创建mysql.conf配置文件\n\n```\ninput {\n    jdbc {\n        #数据库相关\n        jdbc_driver_library => \"mysql-connector-java-5.1.46.jar\"\n        jdbc_driver_class => \"com.mysql.jdbc.Driver\"\n        jdbc_connection_string => \"jdbc:mysql://localhost:3306/blog_db?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true\"\n        jdbc_user => \"root\"\n        jdbc_password => \"123456\"\n		\n        #是否清除last_run_metadata_path记录,如果为true，每次启动都从头开始查询所有数据，增量更新设置为false\n		clean_run => true\n		#表示每分钟同步一次\n        schedule => \"* * * * *\"\n        #sql语句\n		statement => \"SELECT * FROM tb_blog WHERE update_time > :sql_last_value AND update_time < NOW() ORDER BY update_time desc\"\n    }\n}\n\noutput {\n    elasticsearch {\n        #ES地址:端口\n        hosts => [\"127.0.0.1:9200\"]\n        #自定义索引\n        index => \"index_blog\"\n        #设置自增主键ID，不设置会导致更新时会增加数据\n        document_id => \"%{blog_id}\"\n        #后面两句是使用自定义模板\n		#manage_template => false\n		#template_name => \"index_blog\"\n    }\n	stdout {\n		#日志输出\n		codec => json_lines\n	}\n}\n```\n\nsql语句获取的数据就是每分钟从MySQL同步到ES中的数据，其中`:sql_last_value`是保证增量更新的“关键字”一类的？具体我也不太懂，不过从一些结果测试来看，若我将`clean_run`设置为true，则每次启动ES会先进行一次全量查询（代码表现为:sql_last_value的值为1970年XXXX），若设置是false，则不会做全量查询\n\n配置mysql.conf后就可以在Logstash的bin目录下输入`logstash mysql/mysql.conf`启动了，至此，**ELK已经全部启动并且MySQL数据也能同步到ES中**，之后就是Java怎么来调用ES接口服务\n\n\n\nES7更推荐使用**高级客户端**来访问ES服务器，需要添加的依赖有\n\n```\n        <dependency>\n            <groupId>org.elasticsearch</groupId>\n            <artifactId>elasticsearch</artifactId>\n            <version>7.4.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.elasticsearch.client</groupId>\n            <artifactId>elasticsearch-rest-client</artifactId>\n            <version>7.4.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.elasticsearch.client</groupId>\n            <artifactId>elasticsearch-rest-high-level-client</artifactId>\n            <version>7.4.2</version>\n        </dependency>\n```\n\nSpringBoot配置文件中添加ES服务器的配置\n\n```\nspring.elasticsearch.rest.uris=http://127.0.0.1:9200\n```\n\n之后就可以按照**对应版本的Java Rest Client的API**来访问ES服务器获取数据了，相关操作我认为看官方文档最为准确[https://www.elastic.co/guide/en/elasticsearch/client/java-rest/index.html](https://www.elastic.co/guide/en/elasticsearch/client/java-rest/index.html)\n\n## Logstash使用自定义模板\n\nLogstash默认的模板使用的是standard，因为有中文分词（检索用）的需要所以默认模板不行，**需要自定义模板并采用IK分词器**，先配置好IK分词器，下好和ELK**版本一致**的IK分词器后解压到`elasticsearch-7.4.2\\plugins`中即可\n\n然后在上文中的Logstash的启动配置文件中看到**output-es**中最后那两句被注释的语句`manage_template => false`我理解的大致意思就是不让Logstash来管理模板，而使用ES的动态映射模板。`template_name => \"index_blog\"`就是模板对应的名称，这就需要你在Kibana控制台中向ES添加名为index_blog的模板，你可以参照如下添加\n\n```\nPUT /_template/index_blog\n{\n  \"template\": \"index_blog\",\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 0\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"blog_id\": {\n        \"type\": \"long\"\n      },\n      \"blog_title\": {\n        \"analyzer\": \"ik_smart\",\n        \"type\": \"text\"\n      },\n      \"blog_cover_image\": {\n        \"type\": \"keyword\"\n      },\n      \"blog_content\": {\n        \"analyzer\": \"ik_smart\",\n        \"type\": \"text\"\n      },\n      \"blog_category_id\": {\n        \"type\": \"long\"\n      },\n	  ...省略号...\n    }\n  }\n}\n```\n\n之后再创建的index就是使用的该模板了！\n\n# SpringBoot使用Redis作缓存\n\n这里只是用Redis作简单的缓存，不涉及太多内容\n\n先下好并启动Redis服务，可以参照[Redis 安装](https://www.runoob.com/redis/redis-install.html)\n\n只需添加一个依赖：\n\n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n\nSpringBoot配置文件：\n\n```\nspring.cache.type=redis\n\n# Redis config\nspring.redis.database=0\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\nspring.redis.timeout=5000\n```\n\n再需要继承`CachingConfigurerSupport`\n\n```java\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n    @Bean\n    public RedisCacheManager cacheManager(RedisConnectionFactory factory) {\n        return RedisCacheManager.create(factory);\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n\n之后就可以使用@Cacheable、@CacheEvict、@CachePut这些注解来使用缓存了\n\n- @Cacheable：可作用在实体类和方法上，作用在方法上时会先查Redis有该键值对没，若无则将方法的返回值序列化后作为value存入Redis中，key则是XX::YY的形式，其中XX是该注解属性cacheNames的值，YY是该注解属性key的值；若有则直接获取Redis中的值\n- @CacheEvict：方法执行后删除对应key的键值对\n- @CachePut：方法执行后更新对应key的键值对，新的value为方法返回值\n\n# END\n\n因为是完成项目后对这两个部分的回顾，有些步骤可能不全或不适用，也没有说去用一个小demo去测试能不能复现，事实回忆中项目正确运行满足需求是按照其上步骤完成，其中踩的坑大致都能通过搜索引擎解决，也就没有多提~希望对你有所帮助\n\n\n\n# 参考\n\n- [Springboot + ElasticSearch 构建博客检索系统](https://www.imooc.com/learn/1161)\n\n- [https://www.elastic.co/cn/elasticsearch](https://www.elastic.co/cn/elasticsearch)\n\n- [Redis 安装](https://www.runoob.com/redis/redis-install.html%29)', 1, 'Java', 'SpringBoot,ElasticSearch,Redis', '大致介绍如何在SpringBoot中同步MySQL数据到Elasticsearch中，并使用Redis作缓存', 'published', 10, '2020-04-12 14:24:44', '2020-05-09 19:52:55');
INSERT INTO `tb_blog` VALUES (5, 'Vue及SpringBoot实现个人博客', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/Vue%E5%8F%8ASpringBoot%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F2328620200412.jpg', '# 前台展示\n\n刚雏形完成的时候在云服务器上运行过一段时间，12月7日后修改为云服务器部署Hexo+Matery博客，前台样式模板参照的是该Hexo主题\n\n图片后面再补~\n\n# 后台展示\n\n![后台页面](https://blog-1300278090.cos.ap-chengdu.myqcloud.com/Vue%E5%8F%8ASpringBoot%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/g1.gif)\n\n# 后端技术栈\n\nSpringBoot，MyBatis，JWT，ELK，Redis\n\n后端项目地址：[https://github.com/doubj/springboot-blog](https://github.com/doubj/springboot-blog)\n\n# 前端技术栈\n\nVue，Vue-CLI，VueX，Vue-Router，Axios，Vuetify\n\n前端项目地址：[https://github.com/doubj/vue-blog](https://github.com/doubj/vue-blog)\n\n# 一些特点\n\n区分于个人博客系统基础功能的一些**自己的想法**，或某些**功能比较好的实现方式**\n\n## 关于分类和标签\n\n需求：分类和标签更像是每篇博客的**“附加品\"**，为此而多出来两个“附加品”的管理模块似乎有些小题大做，事实上我们对分类和标签确实也**不太需要关心**，能不能\"悄无声息\"的去掉这两个模块？\n\n实现：将分类/标签的**添加**放在博客的**添加和更新**中，将分类/标签的**删除**放在博客的**更新和删除**中，上层对分类和标签的处理根本不关心\n\n新增博客的代码：\n\n```java\n    @Override\n    public boolean addPost(Blog blog){\n        //1. 确保分类数据真实\n        ensureBlogCategory(blog);\n        //2. 添加博客记录\n        // 添加博客\n        int res = blogMapper.insertSelective(blog);\n        if(res > 0){\n            //添加博客成功\n            //3. 获取所有添加成功的标签集合\n            List<BlogTag> blogTags = this.getAddTags(blog.getBlogTags());\n            //4. 向关系表添加数据\n            for(BlogTag blogTag : blogTags){\n                addBlogTagRelation(blogTag,blog.getBlogId());\n            }\n            return true;\n        }\n        return false;\n    }\n```\n\n里面有很多私有的辅助方法（有的会被重复调用）。`ensureBlogCategory()`方法是保证**若新增博客的分类是新分类，会先添加该分类再将新加的分类Id字段填入博客记录**。`getAddTags()`大体类似\n\n\n\n新的想法：其实你可以认为是把分类和标签的管理**掰开揉碎适应性**的放入博客管理模块里了，这样使得代码的**耦合度变高**，**一个看上去不归博客管理的事情由博客管理来做了**。我觉得这个模式很贴合生产者消费者的工作流程，新增博客（生产）------->新增分类（消费），也就是说在新增博客时有新分类产生，给一个轮询并休眠的线程新的分类对象，由该线程负责新分类的添加，这样会不会更合适一点？\n\n## 关于图片上传\n\n需求：**将博客图片素材上传至云服务器**，个人目前比较喜欢将博客图片素材放在第三方存储对象服务上（B站UP羊哥有发过一个白嫖Github的使用方式）\n\n实现：首先对象存储服务我有使用腾讯云和华为云（皆可），如何用Java代码连接对应的服务看官方给的JavaAPI比啥都好使，白纸黑字，中国汉字。**注意引依赖尽量新一点**，头像和博客背景图的上传使用的是`Input`标签的`file`类型，这样以后我后台接收就被迫**从RequestBody接收JSON对象转为了接收Form表单**，多出很多字段要处理。然后博客内容的图片上传使用`mavon-editor`官方给的图片上传API就行了\n\n\n\n**待处理的内容**：对删除博客后产生的“垃圾”图片没做处理，目前的想法是和删除博客一起，因为一些原因删除博客是软删除，会做一个类似定时任务的效果，定时清理这些“垃圾”\n\n## 关于搜索\n\n需求：使用Elasticsearch实现博客检索\n\n实现：使用Logstash将MySQL中博客表的数据同步到ES中，请求搜索接口时调用ES的查询方式\n\n细节的补充：关于SpringBoot如何使用Logstash同步MySQL数据到ES中可以看我的另一篇博客，里面有详细步骤。一个比较让初学者的我头疼的点就是让**Logstash使用我自己的模板**，因为我要用IK分词器获得高亮的搜索结果返回给前端高亮显示，在那里面也有说\n\n贴一下搜索代码：基本使用官方文档的内容，不同的只是查询语句\n\n```java\n    public List<Map<String, Object>> searchByEs(String keyWords) {\n        //https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-search.html\n        // 1. 先创建搜索请求对象\n        SearchRequest searchRequest = new SearchRequest(\"index_blog\");\n\n        // 2. 构建查询条件\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        // 区别于官方文档,使用BoolQueryBuilder，部分参考自：https://www.cnblogs.com/sbj-dawn/p/8891419.html\n        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n        MatchPhraseQueryBuilder matchPhraseQueryBuilder = QueryBuilders.matchPhraseQuery(\"blog_title\", keyWords);\n        MatchPhraseQueryBuilder matchPhraseQueryBuilder2 = QueryBuilders.matchPhraseQuery(\"blog_content\", keyWords);\n        boolQueryBuilder.should(matchPhraseQueryBuilder);\n        boolQueryBuilder.should(matchPhraseQueryBuilder2);\n        searchSourceBuilder.query(boolQueryBuilder);\n\n        // 高亮显示\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\n        HighlightBuilder.Field highlightTitle = new HighlightBuilder.Field(\"blog_title\");\n        highlightBuilder.field(highlightTitle);\n        HighlightBuilder.Field highlightContent = new HighlightBuilder.Field(\"blog_content\");\n        highlightBuilder.field(highlightContent);\n        highlightBuilder.preTags(\"<span style=\\\"color:red\\\">\");\n        highlightBuilder.postTags(\"</span>\");\n        searchSourceBuilder.highlighter(highlightBuilder);\n        // 查询条件制约\n        // 确认从第0个元素开始查询，默认也是0\n        searchSourceBuilder.from(0);\n        // 返回的查询结果最大为5，默认是10\n        searchSourceBuilder.size(5);\n        // 超时限制\n        searchSourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));\n        // 3. 将查询条件注册到请求中\n        searchRequest.source(searchSourceBuilder);\n\n        // 4. 获取同步返回结果\n        ArrayList<Map<String, Object>> list = new ArrayList<>();\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = searchResponse.getHits();\n            SearchHit[] searchHits = hits.getHits();\n            for(SearchHit hit : searchHits){\n                Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n                Map<String, HighlightField> highlightFields = hit.getHighlightFields();\n                HighlightField highlight1 = highlightFields.get(\"blog_title\");\n                HighlightField highlight2 = highlightFields.get(\"blog_content\");\n                if(highlight1 != null){\n                    Text[] text = highlight1.fragments();\n                    sourceAsMap.put(\"blog_title\", arrayToString(text));\n                }\n                if(highlight2 != null){\n                    Text[] text = highlight1.fragments();\n                    sourceAsMap.put(\"blog_content\", arrayToString(text));\n                }\n                list.add(sourceAsMap);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return list;\n    }\n```\n\n## 关于缓存\n\n需求：对于一些如分类及对应博客数，标签及对应博客数，近六月书写博客数的统计数据存到缓存中\n\n实现：使用Redis做缓存，并结合Spring的注解：`@Cacheable`缓存键值对，`@CacheEvict`删除键值对，`@CachePut`更新键值对\n\n就比如：\n\n```java\n    @Cacheable(key = \"\'categoryAndCount\'\")\n    public List<BlogCategoryVo> getCategoryAndCountWithStatus(boolean isPublished) {\n        List<BlogCategory> blogCategories = blogCategoryMapper.getAllCategories();\n        List<BlogCategoryVo> blogCategoryVoList = new ArrayList<>();\n        for(BlogCategory blogCategory : blogCategories){\n            BlogCategoryVo blogCategoryVo = new BlogCategoryVo();\n            blogCategoryVo.setCategoryId(blogCategory.getCategoryId());\n            blogCategoryVo.setCategoryName(blogCategory.getCategoryName());\n\n            int blogCount = blogMapper.getBlogCountByCategoryIdAndStatus(blogCategory.getCategoryId(), isPublished);\n            blogCategoryVo.setBlogCount(blogCount);\n            blogCategoryVoList.add(blogCategoryVo);\n        }\n        if(blogCategoryVoList.size() > 0){\n            return blogCategoryVoList;\n        }\n        return null;\n    }\n```\n\n我将Cacheable作用在方法上，他就会将方法的返回值作为value存入Redis中，key则是我在该方法所属类上定义的一个`@CacheConfig(cacheNames = \"blog\")`(cacheNames你也可以在Cacheable中定义，这里是一个作用域的关系)和上面代码中的key属性相结合，最后是：blog::categoryAndCount。关于SpringBoot如何整合Redis做缓存你可以看我那篇搜索和缓存一起的博客\n\n# 参考\n\n- [ZHENFENG13/My-Blog](https://github.com/ZHENFENG13/My-Blog)\n\n- [vuetify-material-dashboard](https://github.com/creativetimofficial/vuetify-material-dashboard)\n\n- [hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)\n\n- [eladmin](https://github.com/elunez/eladmin)\n\n- [hello-blog-admin](https://github.com/byteblogs168/hello-blog-admin)', 2, '项目', 'Vue,SpringBoot', '一个前后端分离的项目，基于接口开发，接口规范尽可能参照RESTFul规范，阴差阳错下也成了我的毕业设计~技术栈包括：前端VUE全家桶，后端主要是SpringBoot、MyBatis、ElasticSearch、Redis', 'published', 11, '2020-04-12 14:44:32', '2020-04-12 14:44:32');
INSERT INTO `tb_blog` VALUES (6, '浅谈单例模式', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%B5%85%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F1130520200412.jpg', '# 饿汉式\n\n> 饿汉式，见名知意，饿了，给我来十碗饭，现在立刻马上。\n\n## 直接获取\n\n```java\n    private static final Singleton1 instance = new Singleton1();\n    private Singleton1(){ }\n    public Singleton1 getInstance(){\n        return instance;\n    }\n```\n\n## 静态初始化\n\n```java\n    private static final Singleton2 instance;\n    static {\n        instance = new Singleton2();\n    }\n    private Singleton2(){ }\n    public Singleton2 getInstance(){\n        return instance;\n    }\n```\n\n单例模式对外只暴露一个`getInstance`的接口，如何生成一个唯一的实例在是对使用者透明的。如何高效正确的实现一个单例模式也就成了我们需要关心的事情\n\n饿汉式优点就是简单明了，不需要考虑太多。\n\n缺点就是无法实现懒加载，在还没被使用时就被创建，既占用了内存又显得不够优雅，所以不推荐使用饿汉式\n\n\n\n# 懒汉式\n\n> 懒汉式，顾名思义，关键在懒加载\n\n来看看懒汉式的“发展史”吧\n\n```java\n    private static Singleton3 instance ;\n    private Singleton3(){}\n    public Singleton3 getInstance(){\n        if(instance == null){\n            instance = new Singleton3();\n        }\n        return instance;\n    }\n```\n\n完全不考虑线程安全性,并发下多个线程同时进入if判断语句，此时会产生多个实例\n\n```java\n    private Singleton3 instance;\n    private Singleton3() {}\n    public Singleton3 getInstance() {\n        if (instance == null) {\n            synchronized (Singleton3.class) {\n                instance = new Singleton3();\n            }\n        }\n        return instance;\n    }\n```\n\n同时只允许一个线程创建实例，缺陷同上\n\n```java\n    private volatile static Singleton3 instance;\n\n    private Singleton3() {\n    }\n\n    public Singleton3 getInstance() {\n        if (instance == null) {\n            synchronized (Singleton3.class) {\n                if (instance == null) {\n                    instance = new Singleton3();\n                }\n            }\n        }\n        return instance;\n    }\n```\n\n**双重检查**：即使并发下两个线程都经过了第一次if判断。由于synchronized的可见性以及happens-before原则。后获得锁的线程是能够看到新生成的实例的，自然也不会创建新的实例了\n\n那既然synchronized保证了可见性，那为什么还需要用volatile来修饰实例变量呢？这不是多此一举吗？\n\n详细的原因建议你可以看知乎上的回答[java 单例模式中双重检查锁定 volatile 的作用](https://www.zhihu.com/question/56606703?sort=created)\n\n用我的大白话翻译来说，主要是为了禁止指令重排序(重排序又是一个很复杂的东西....)\n\n这里的`new Singleton3();`在java字节码层面会有以下四步\n\n1. 申请内存空间(在Java堆中分配内存空间)\n2. 初始化默认值(为分配到的内存空间初始值置零)\n3. 执行构造器方法\n4. 连接引用和实例\n\n这四步中后两步有可能会重排序导致还未初始化完全的对象被发布出去，另一个线程获取的实例可能是刚被JVM初始化默认值(第2步)的实例对象，从而导致空指针异常等问题\n\n再引用一句答题者中大佬的补充\n\n> synchronized 禁止重排序是通过内存屏障实现的, 简单来说, 内存屏障只保证指令不会越过该屏障, 而synchronized块内部的指令仍然有可能发生重排序\n\n\n\n# 静态内部类\n\n```java\n    private Singleton4() {\n    }\n\n    private static class SingletonInstance {\n        private static final Singleton4 instance = new Singleton4();\n    }\n\n    public Singleton4 getInstance() {\n        return SingletonInstance.instance;\n    }\n```\n\n这里我暂时只知道也能实现懒加载的功能，但具体底层为什么不太清楚，引用[单例模式的八种写法比较](https://www.cnblogs.com/zhaoyan001/p/6365064.html)一文中的解析\n\n> 静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。\n\n# 枚举类\n\n```java\npublic enum Singleton5 {\n    INSTANCE;\n    public void whatever(){\n\n    }\n}\n```\n\n这个看着比别的都简单，哈哈哈哈哈~\n\n\n\n# 选择\n\n饿汉式并不是不可以，懒汉式要注意线程安全(使用双重检查),静态内部类和枚举更优。\n\n\n再引用《Effective Java》(第二版)中的原话\n\n> 单元素的枚举类型已经成为实现Singleton的最佳方法\n\n\n\n# 参考\n\n- Joshua Bloch. Effective Java中文版（第2版） [M]. 机械工业出版社, 2009.\n- [java 单例模式中双重检查锁定 volatile 的作用](https://www.zhihu.com/question/56606703?sort=created)', 1, 'Java', 'Java,设计模式', '主要就实现单例模式的几种方式和优缺点来聊一聊', 'published', 4, '2020-04-12 14:47:53', '2020-04-12 14:47:53');
INSERT INTO `tb_blog` VALUES (7, '冒泡排序及优化', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BC%98%E5%8C%96%2F2070720200412.jpg', '# 前言\n\n最近买了本《漫画算法：小灰的算法之旅》来补充下自己算法相关的一些知识，如最常见排序算法，看豆瓣评分还不错我就买了~\n\n前面几章关于算法基本和数据结构的有一定基础所以看的比较快，之后就是开始讲排序算法，首先将的就是冒泡排序。说实在的，对于排序的相关知识我真的一个都不知道这会儿，看了冒泡排序的过程图解后回忆起来很多。\n\n**然后他对普通的冒泡进行了两个优化：**\n\n1. 对执行轮次的优化：有时我们已经能看到数组是排序好了，但还是会去执行循环\n2. 对每个轮次执行次数的优化：原始每次默认是新增一个已排序好的数到右边，而实际中可能右边有多个数已经排序好了，没必要在进行多余的排序\n\n看到优化的解读的时候我就觉得十分新奇，然后也觉得很实用，想着复现一下，然后在进行第二个优化的时候就发现了问题，他给的代码和原意有出入而且执行后我觉得已经不符合冒泡排序了\n\n\n\n# 普通冒泡排序\n\n普通冒泡排序的图解我就不画了- -，这个有原书的可以看原书，网上应该也有相关的图解。**大致思路就是每轮循环两两比较并把最大的元素“冒泡”到最右端**，所以理论上冒泡排序的轮次都会是数组长度减一。以下是代码\n\n```java\n    public static void BubbleSort(int[] res){\n        for (int i = 0; i < res.length - 1; i++) {\n            for (int j = 0; j < res.length - i - 1; j++) {\n                if(res[j] > res[j + 1]){\n                    int temp = res[j];\n                    res[j] = res[j + 1];\n                    res[j + 1] = temp;\n                }\n            }\n        }\n    }\n```\n\n冒泡排序的基本结构就是两个For循环，所以时间复杂度是O(n^2)。然后容易忘记的就是两次循环的初值和最大值，外层循环还是好记，**因为轮次是数组长度减一，所以范围是[0~res.length-1),左闭右开，右端点减左端点就是长度。**内层循环则是从第0个元素开始到未“冒泡”的最后一个元素（**该元素是最后一个元素减外层循环的次数**）\n\n# 对轮次的优化\n\n对于这样一个数组[3,2,1,5,6,7,8,9,10]来说原始冒泡排序过程大致如下：\n\n1. 第一轮冒泡后：[2,1,3,5,6,7,8,9,10]\n2. 第二轮：[1,2,3,5,6,7,8,9,10]\n3. 第三轮：[1,2,3,5,6,7,8,9,10]\n4. 第四轮：[1,2,3,5,6,7,8,9,10]\n5. 第五轮：[1,2,3,5,6,7,8,9,10]\n6. 第六轮：[1,2,3,5,6,7,8,9,10]\n7. 第七轮：[1,2,3,5,6,7,8,9,10]\n8. 第八轮：[1,2,3,5,6,7,8,9,10]\n\n可以明显的看到第二轮冒泡后已经是排序好了，不需要再继续执行下去了，而原方法则会一直机械的执行下去直到最后一个轮次\n\n对于该点优化只需要**使用一个标记位来标志是否已排序好**，若已标记好则直接退出循环\n\n那什么时候代表标记好了呢？**经过一轮左右比较冒泡最大值，没有进行一次交换**是不是就可以说明没有进行接下来排序的必要了？所以代码实现如下：\n\n```java\n    public static void bubbleSort(int[] res){\n        for (int i = 0; i < res.length - 1; i++) {\n            // 优化1，若某一轮次发现不需要进行交换操作（也就是已是排序状态）则直接跳出\n            boolean flag = true;\n            for (int j = 0; j < res.length - 1 - i; j++) {\n                if(res[j] > res[j + 1]){\n                    int temp = res[j];\n                    res[j] = res[j + 1];\n                    res[j + 1] = temp;\n                    // 优化1，有交换，说明还不是排序状态\n                    flag = false;\n                }\n            }\n            // 优化1测试\n            System.out.println(\"进行完了第\" + i + \"次排序\");\n            // 优化1，若没发生交换则已是排序状态，直接退出\n            if(flag){\n                break;\n            }\n        }\n    }\n```\n\n执行结果是符合预期的共3轮次的排序的，相较于原方法，对于一些排序的不是那么散的数组来说能够节省不少时间\n\n\n\n# 对执行次数的优化\n\n之前是对外层循环的优化，这次是对内层循环的优化。场景是怎么样呢？还是之前那个数组[3,2,1,5,6,7,8,9,10]，尽管我们优化了轮次，**但对于每个轮次他都会对后面已经排序好的5,6,7,8,9,10去查询并比较大小，而这完全是没必要的**\n\n也就是说我们希望在第二个轮次我们就能知道3以及后面的所有数都是排序好的，那3是什么？是第一轮排序中“冒泡”出来的最大值，所以我们第二个轮次关心的就只有**上一个轮次冒泡出来的最大值的之前的数据**，基于此我们需要一个临时变量来存储这个冒泡出来的最大值的下标\n\n```java\n    public static void bubbleSort(int[] res){\n        // 优化2，每次排序都动态的更新未被排序的区间，right是无序区间的右端点（开）\n        int right = res.length - 1;\n\n        for (int i = 0; i < res.length - 1; i++) {\n            // 优化1，若某一轮次发现不需要进行交换操作（也就是已是排序状态）则直接跳出\n            boolean flag = true;\n            // 优化2，tempRight是用来存储每次交换后的右端点作为临时右端点，在内层循环完成后将该值传给下一次循环\n            int tempRight = right;\n            // 优化2，测试相关，用来记录个轮次的右端点\n            int count = 0;\n            for (int j = 0; j < right; j++) {\n                // 优化2，测试相关，存储本轮次的右端点，第一次右端点一定是最后一个元素的下标\n                count = right;\n                if(res[j] > res[j + 1]){\n                    int temp = res[j];\n                    res[j] = res[j + 1];\n                    res[j + 1] = temp;\n                    // 优化1，有交换，说明还不是排序状态\n                    flag = false;\n                    // 优化2，临时存储每次交换的较大值最为下个轮次的右端点（每次交换都更新）\n                    tempRight = j + 1;\n                }\n                // 优化2，若本轮次应该需要进行的排序区间已排序完，则更新下次排序的右端点后进入下一轮次\n                if(j == right - 1){\n                    right = tempRight;\n                    break;\n                }\n            }\n            // 优化测试\n            System.out.println(\"进行完了第\" + i + \"次排序,排序终点是第\" + count + \"个元素\");\n\n            // 优化1，若没发生交换则已是排序状态，直接退出\n            if(flag){\n                break;\n            }\n        }\n    }\n```\n\n执行结果也是符合预期的，第一个轮次遍历了8个元素，第二轮次遍历了2个元素，最后一个轮次只遍历了一个元素\n\n\n\n**书上的错误内容（已解决）**\n\n当然，对于结果我只测试了这一组数据，自我感觉逻辑上是对的（优化上），所以没多测试，如果你在复现中发现测试数据不符合预期欢迎纠错。主要我认为书上的代码其实给的是**错误**的，把书上的代码套在我的里面大致是这样的（不要管测试的东西~）\n\n```java\n    public static void bubbleSortError(int[] res){\n        for (int i = 0; i < res.length - 1; i++) {\n            boolean flag = true;\n            int right = res.length - 1;\n            int count = 0;//测试用，自写\n            for (int j = 0; j < right; j++) {\n                count = right;//测试用，自写\n                if(res[j] > res[j + 1]){\n                    int temp = res[j];\n                    res[j] = res[j + 1];\n                    res[j + 1] = temp;\n                    flag = false;\n                    right = j;\n                }\n            }\n            // 测试\n            System.out.println(\"进行完了第\" + i + \"次排序,排序终点是第\" + count + \"个元素\");\n            if(flag){\n                break;\n            }\n        }\n    }\n```\n\n同样的是上面大小为9的数组，该方法执行轮次是4次且终点显示都是8，直接看代码我还真看不出来咋回事，Debug一下马上就清晰了。\n\n1. 轮次为什么变成了4？过程大概是这样的：首先3和2交换后，right = j，此时j为0,所以right被赋值为0。进入下一次循环j为1,新的right为0，直接跳出循环。发现问题没？修改了循环条件导致循环跳出，当然我们这里就是要修改下一轮的内存循环条件，而该代码是直接把本轮的内存循环条件给改了，这直接就导致每轮内层循环只要产生一次交换就退出，然后进入下一轮。**当交换次数 < 轮次时还好，还能排序成功。一旦交换次数 > 轮次那排序结果直接错误**，随便把一个较大的数排前面就能出错比如[9,1,2,4,7,5,6,3,8]按上面的方法排序结果就是[1,2,4,5,6,7,9,3,8]\n2. 终点显示为8如果理解了上一点就能明白为什么了，因为每次交换完都会推出循环，那么count计数器肯定也得不到更新只会一直是初始值为数组大小减1\n\n# ENDING\n\n最后，我确实认为这两个优化方案实用且有效，能有效减少对于排序不那么乱的数组减少执行时间。然后，这次也是对书中的内容提出了质疑\n\n本着严谨的态度，万一是自己水平太低没理解透，我会以邮件的形式向作者表达自己的疑问~\n\n\n\n2020年1月25日：最后在微信公众号后台提这个问题的时候自动回了个**勘误表**，牛逼！不愧是程序员的公众号，里面有提到这个错误，也有修正\n\n\n\n说起来我也觉得《码出高效：Java开发手册》一书关于Java线程的状态描述也觉得有错误，但这个问题和上述的代码问题不是一类问题，比较**模棱两可**，**我个人是偏向于Java线程的6种状态**的（**Java中Thread源码内部枚举类State明确写明了哪六种状态及相关描述**）。书上描述的5种状态好像是属于操作系统语义层面上的5种状态，但它又明确指明了RUNNABLE是调用start()之后运行之前的状态，RUNNING是run()正在执行时线程的状态（**所以根据上下文他这里说的确实就是Java线程？？**），但源码却又告诉我们不是这样的，读者又应该信谁的呢？\n\n# 补充：鸡尾酒排序\n\n差点忘了，还有书上一个冒泡排序引申出来的鸡尾酒排序没做练习~主要因为书上对于鸡尾酒排序只做了轮次的优化，把对执行次数的优化作为练习，比较闲就思考了一下完成了两个优化点，直接上代码吧~\n\n\n\n不对，还是先说下鸡尾酒排序的大致思路。就是不再是单一的单向冒泡，而是来回循环冒泡，冒完最大值又冒最小值，同时依然每个轮次检查是否已完全排序并重新划分未排序区间这两个优化。\n\n```java\n    public static void cocktailSort(int[] array){\n        int left = 0;\n        int right = array.length - left - 1;\n        final int HALF_CONST = 2;\n        for (int i = 0; i < array.length / HALF_CONST; i++) {\n            boolean isSorted = true;\n            // 从左至右\n            int tempRight = 0;\n            for (int j = left; j < right; j++) {\n                if(array[j] > array[j+1]){\n                    int temp = array[j];\n                    array[j] = array[j+1];\n                    array[j+1] = temp;\n                    isSorted = false;\n                    tempRight = j;\n                }\n                if(j == right - 1){\n                    right = tempRight;\n                }\n            }\n            if(isSorted){\n                break;\n            }\n            // 重置标记位\n            isSorted = true;\n            // 从右到左\n            int tempLeft = 0;\n            for (int j = right; j > left ; j--) {\n                if (array[j-1] > array[j]){\n                    int temp = array[j-1];\n                    array[j-1] = array[j];\n                    array[j] = temp;\n                    isSorted = false;\n                    tempLeft = j;\n                }\n                if(j == left + 1){\n                    left = tempLeft;\n                }\n            }\n            if(isSorted){\n                break;\n            }\n        }\n    }\n```\n\n这次没有用打印来帮助我测验结果，直接DEBUG了一次{7,2,6,5,3,8,9}的排序过程，重点在一轮从左至右后right确实变为了3，再一轮从右至左后left变成了2，最后排序结果也是正确的，完成！\n\n\n\n## 最后的总结\n\n普通的冒泡排序一定要记住思路：时间复杂度为O（n^2），因为双重循环，每个循环的结果是最大的元素“冒泡”到最右端，内层循环将相邻元素比较并交换。普通的冒泡排序可以对轮次和每轮次执行次数优化，特别还有鸡尾酒排序左右来回冒泡（晕头转向？或许这是名字寓意？），都是普通冒泡排序的“升级版”！\n\n\n\n# 参考\n\n- 魏梦舒. 漫画算法：小灰的算法之旅 [M]. 电子工业出版社, 2019.', 1, 'Java', 'Java,Sorting', '在复现《漫画算法》一书关于冒泡排序的内容时认为书中的部分内容有错误（已解决）', 'published', 1228, '2020-03-03 14:50:18', '2020-04-06 18:50:20');
INSERT INTO `tb_blog` VALUES (8, '新的标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E7%9A%84%E6%A0%87%E9%A2%98%2F7308820200509.jpg', '# 一级标题\n> 这是引用', 1, 'Java', 'ElasticSearch', '摘要', 'published', 0, '2020-05-09 23:15:54', '2020-05-11 10:26:16');
INSERT INTO `tb_blog` VALUES (9, '这是新的标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E8%BF%99%E6%98%AF%E6%96%B0%E7%9A%84%E6%A0%87%E9%A2%98%2F2267120200511.jpg', '# 这是正文内容', 3, '新的分类', '标签', '这是摘要', 'published', 0, '2020-05-11 10:27:08', '2020-05-11 10:45:57');
INSERT INTO `tb_blog` VALUES (10, '新标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E6%A0%87%E9%A2%98%2F3988720200511.jpg', '# 新的内容', 1, 'Java', 'ElasticSearch,Java', '摘要', 'published', 0, '2020-05-11 10:46:30', '2020-05-15 23:31:59');
INSERT INTO `tb_blog` VALUES (11, '旧标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%97%A7%E6%A0%87%E9%A2%98%2F5369020200511.jpg', '# 内容', 1, 'Java', 'ElasticSearch', '摘要', 'deleted', 0, '2020-05-11 10:52:49', '2020-05-15 23:18:50');
INSERT INTO `tb_blog` VALUES (12, '新博客', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E5%8D%9A%E5%AE%A2%2F3005420200515', '# 标题', 4, '新分类', 'ElasticSearch,Java', '摘要', 'deleted', 0, '2020-05-15 22:51:19', '2020-05-15 23:18:48');
INSERT INTO `tb_blog` VALUES (13, '新的博客', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E7%9A%84%E5%8D%9A%E5%AE%A2%2F7893820200515', '# 标题', 5, '新的分类啊', 'ElasticSearch', '摘要', 'deleted', 0, '2020-05-15 22:57:02', '2020-05-15 23:18:47');
INSERT INTO `tb_blog` VALUES (14, '新的博客内容', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9%2F4140320200515', '# 一级标题', 6, '新', 'ElasticSearch,Java', '摘要', 'deleted', 0, '2020-05-15 23:16:20', '2020-05-15 23:18:43');
INSERT INTO `tb_blog` VALUES (15, '新的标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E7%9A%84%E6%A0%87%E9%A2%98%2F2687020200515', '# 标题', 7, '分类', 'ElasticSearch', '摘要', 'deleted', 0, '2020-05-15 23:23:46', '2020-05-17 15:55:47');
INSERT INTO `tb_blog` VALUES (16, '新的标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E6%96%B0%E7%9A%84%E6%A0%87%E9%A2%98%2F1111920200517', '# 一级标题', 8, '随便', 'ElasticSearch', '摘要', 'published', 0, '2020-05-17 15:56:33', '2020-05-17 15:56:37');
INSERT INTO `tb_blog` VALUES (17, '随便的标题', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E9%9A%8F%E4%BE%BF%E7%9A%84%E6%A0%87%E9%A2%98%2F1689220200524', '# 一级标题\n![wallhavenkwjgz6.png](https://obs-myblog.obs.cn-south-1.myhuaweicloud.com:443/%E9%9A%8F%E4%BE%BF%E7%9A%84%E6%A0%87%E9%A2%98%2F5029020200524)', 3, '新的分类', 'Java', '这是摘要', 'draft', 0, '2020-05-24 16:09:52', '2020-05-24 16:09:52');

-- ----------------------------
-- Table structure for tb_blog_category
-- ----------------------------
DROP TABLE IF EXISTS `tb_blog_category`;
CREATE TABLE `tb_blog_category`  (
  `category_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分类表主键',
  `category_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类的名称',
  PRIMARY KEY (`category_id`) USING BTREE,
  UNIQUE INDEX `category_name`(`category_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_blog_category
-- ----------------------------
INSERT INTO `tb_blog_category` VALUES (1, 'Java');
INSERT INTO `tb_blog_category` VALUES (7, '分类');
INSERT INTO `tb_blog_category` VALUES (6, '新');
INSERT INTO `tb_blog_category` VALUES (4, '新分类');
INSERT INTO `tb_blog_category` VALUES (3, '新的分类');
INSERT INTO `tb_blog_category` VALUES (5, '新的分类啊');
INSERT INTO `tb_blog_category` VALUES (8, '随便');
INSERT INTO `tb_blog_category` VALUES (2, '项目');

-- ----------------------------
-- Table structure for tb_blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `tb_blog_tag`;
CREATE TABLE `tb_blog_tag`  (
  `tag_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '标签表主键id',
  `tag_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标签名称',
  PRIMARY KEY (`tag_id`) USING BTREE,
  UNIQUE INDEX `tag_name`(`tag_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_blog_tag
-- ----------------------------
INSERT INTO `tb_blog_tag` VALUES (5, 'ElasticSearch');
INSERT INTO `tb_blog_tag` VALUES (1, 'Java');
INSERT INTO `tb_blog_tag` VALUES (6, 'Redis');
INSERT INTO `tb_blog_tag` VALUES (9, 'Sorting');
INSERT INTO `tb_blog_tag` VALUES (4, 'SpringBoot');
INSERT INTO `tb_blog_tag` VALUES (7, 'Vue');
INSERT INTO `tb_blog_tag` VALUES (10, '标签');
INSERT INTO `tb_blog_tag` VALUES (2, '线程池');
INSERT INTO `tb_blog_tag` VALUES (8, '设计模式');
INSERT INTO `tb_blog_tag` VALUES (3, '集合');

-- ----------------------------
-- Table structure for tb_blog_tag_relation
-- ----------------------------
DROP TABLE IF EXISTS `tb_blog_tag_relation`;
CREATE TABLE `tb_blog_tag_relation`  (
  `relation_id` int(20) NOT NULL AUTO_INCREMENT COMMENT '关系表id',
  `blog_id` int(20) NOT NULL COMMENT '博客id',
  `tag_id` int(11) NOT NULL COMMENT '标签id',
  PRIMARY KEY (`relation_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_blog_tag_relation
-- ----------------------------
INSERT INTO `tb_blog_tag_relation` VALUES (1, 1, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (2, 1, 2);
INSERT INTO `tb_blog_tag_relation` VALUES (3, 2, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (4, 2, 3);
INSERT INTO `tb_blog_tag_relation` VALUES (6, 3, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (7, 4, 4);
INSERT INTO `tb_blog_tag_relation` VALUES (8, 4, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (9, 4, 6);
INSERT INTO `tb_blog_tag_relation` VALUES (10, 5, 7);
INSERT INTO `tb_blog_tag_relation` VALUES (11, 5, 4);
INSERT INTO `tb_blog_tag_relation` VALUES (12, 6, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (13, 6, 8);
INSERT INTO `tb_blog_tag_relation` VALUES (14, 7, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (15, 7, 9);
INSERT INTO `tb_blog_tag_relation` VALUES (16, 8, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (17, 9, 10);
INSERT INTO `tb_blog_tag_relation` VALUES (18, 10, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (19, 10, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (20, 11, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (21, 12, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (22, 12, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (24, 13, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (25, 14, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (26, 14, 1);
INSERT INTO `tb_blog_tag_relation` VALUES (27, 15, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (28, 16, 5);
INSERT INTO `tb_blog_tag_relation` VALUES (29, 17, 1);

-- ----------------------------
-- Table structure for tb_comment
-- ----------------------------
DROP TABLE IF EXISTS `tb_comment`;
CREATE TABLE `tb_comment`  (
  `comment_id` int(20) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `content` varchar(300) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `nick_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论人昵称',
  `email` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '联系邮箱',
  `reply_nick_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '回复人昵称',
  `reply_admin` tinyint(1) NULL DEFAULT 0 COMMENT '是否是管理员回复',
  `be_replied_admin` tinyint(1) NULL DEFAULT 0 COMMENT '被回复的是否是博主',
  `type` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论类型，article or message',
  `relation_id` int(20) NULL DEFAULT NULL COMMENT '相关id',
  `pid` int(20) NULL DEFAULT 0 COMMENT '父评论id，为0表示无父评论',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '评论时间',
  PRIMARY KEY (`comment_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 57 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_comment
-- ----------------------------
INSERT INTO `tb_comment` VALUES (1, '张无忌到此一游！', '张无忌', '21212121@qq.com', NULL, 0, 0, 'message', NULL, 0, '2020-05-10 21:38:48');
INSERT INTO `tb_comment` VALUES (2, '我是张三丰哦！', '张三丰', '11111111@qq.com', NULL, 0, 0, 'message', NULL, 0, '2020-05-10 21:39:25');
INSERT INTO `tb_comment` VALUES (3, '林冲给你点个赞！', '林冲', '2222222@qq.com', NULL, 0, 0, 'message', NULL, 0, '2020-05-10 21:39:55');
INSERT INTO `tb_comment` VALUES (4, '令狐冲于此求剑', '令狐冲', NULL, NULL, 0, 0, 'message', NULL, 0, '2020-05-10 21:40:24');
INSERT INTO `tb_comment` VALUES (5, '俺是孤独求败~', '孤独求败', NULL, NULL, 0, 0, 'message', NULL, 0, '2020-05-10 21:40:47');
INSERT INTO `tb_comment` VALUES (7, '我乃日月神教教主', '东方不败', NULL, NULL, 0, 0, 'message', NULL, 0, '2020-05-10 21:44:41');
INSERT INTO `tb_comment` VALUES (8, '真的是张无忌嘛', '路人张', NULL, '张无忌', 0, 0, 'message', NULL, 1, '2020-05-10 21:45:52');
INSERT INTO `tb_comment` VALUES (9, '你就是东方不败？', '阿杰', NULL, '东方不败', 0, 0, 'message', NULL, 7, '2020-05-10 21:47:45');
INSERT INTO `tb_comment` VALUES (10, '多谢留言', 'doubj', NULL, '东方不败', 1, 0, 'message', NULL, 7, '2020-05-10 22:04:20');
INSERT INTO `tb_comment` VALUES (11, '张无忌呀，你好哦', 'doubj', NULL, '张无忌', 1, 0, 'message', NULL, 1, '2020-05-10 23:25:03');
INSERT INTO `tb_comment` VALUES (13, '他就是东方不败', 'doubj', NULL, '阿杰', 1, 0, 'message', NULL, 7, '2020-05-11 00:12:42');
INSERT INTO `tb_comment` VALUES (14, '博主你好哦', '第三人称', '1111112222@qq.com', 'doubj', 0, 1, 'message', NULL, 7, '2020-05-11 00:24:30');
INSERT INTO `tb_comment` VALUES (15, '为什么你是第三人称，而我是第二人称', '第二人称', '2222222@qq.com', '第三人称', 0, 0, 'message', NULL, 7, '2020-05-11 00:35:10');
INSERT INTO `tb_comment` VALUES (16, '博主你好~', '林平之', '', 'doubj', 0, 1, 'message', NULL, 1, '2020-05-11 01:23:33');
INSERT INTO `tb_comment` VALUES (17, '林平之你在做什么？', '阿越', '', '林平之', 0, 0, 'message', NULL, 1, '2020-05-11 01:24:00');
INSERT INTO `tb_comment` VALUES (18, '吾一剑可开山，可平地', '陈平安', '2312312312@qq.com', NULL, 0, 0, 'article', 4, 0, '2020-05-11 01:25:33');
INSERT INTO `tb_comment` VALUES (19, '陈平安你有点厉害啊？', 'doubj', NULL, '陈平安', 1, 0, 'message', NULL, 18, '2020-05-11 01:29:21');
INSERT INTO `tb_comment` VALUES (20, '回复一下~', '温岚', '', '东方不败', 0, 0, 'message', NULL, 7, '2020-05-11 01:31:31');
INSERT INTO `tb_comment` VALUES (21, '那当然', '陈平安', '', 'doubj', 0, 1, 'article', 4, 18, '2020-05-11 01:38:19');
INSERT INTO `tb_comment` VALUES (22, '陈平安你变得厉害了啊', '刘羡阳', '', '陈平安', 0, 0, 'article', 4, 18, '2020-05-11 01:39:20');
INSERT INTO `tb_comment` VALUES (23, '陈平安你怎么来这儿了，快跟我回家', '宁姚', '', NULL, 0, 1, 'article', 4, 0, '2020-05-11 01:40:15');
INSERT INTO `tb_comment` VALUES (24, '刘羡阳你最近在做什么？', 'doubj', NULL, '刘羡阳', 1, 0, 'message', NULL, 18, '2020-05-11 01:46:12');
INSERT INTO `tb_comment` VALUES (25, '这是我的评论', '张三', '', NULL, 0, 0, 'article', 4, 0, '2020-05-11 10:16:52');
INSERT INTO `tb_comment` VALUES (26, '李四的留言', '李四', '', NULL, 0, 0, 'message', NULL, 0, '2020-05-11 10:17:33');
INSERT INTO `tb_comment` VALUES (27, '王五的评论', '王五', '', NULL, 0, 0, 'article', 4, 0, '2020-05-11 10:23:30');
INSERT INTO `tb_comment` VALUES (28, '1111', '啊啊啊啊', '', NULL, 0, 0, 'message', NULL, 0, '2020-05-11 10:23:56');
INSERT INTO `tb_comment` VALUES (29, '谢谢你的评论', 'doubj', NULL, '陈平安', 1, 0, 'message', NULL, 18, '2020-05-11 10:28:05');
INSERT INTO `tb_comment` VALUES (34, '评论', '小杰', '', NULL, 0, 0, 'article', 4, 0, '2020-05-11 10:43:58');
INSERT INTO `tb_comment` VALUES (35, '回复', '大杰', '', '小杰', 0, 0, 'article', 4, 34, '2020-05-11 10:44:05');
INSERT INTO `tb_comment` VALUES (36, '留言', '赵倩', '', NULL, 0, 0, 'message', NULL, 0, '2020-05-11 10:44:32');
INSERT INTO `tb_comment` VALUES (37, '啊啊啊啊啊', '做着做着', '', '啊啊啊啊', 0, 0, 'message', NULL, 28, '2020-05-11 10:44:39');
INSERT INTO `tb_comment` VALUES (38, '张无忌你好', 'doubj', NULL, '张无忌', 1, 0, 'message', NULL, 1, '2020-05-11 10:46:55');
INSERT INTO `tb_comment` VALUES (39, '小丽', '小李', '', NULL, 0, 0, 'article', 4, 0, '2020-05-11 10:50:07');
INSERT INTO `tb_comment` VALUES (40, '啊啊啊啊', '大李', '', '小李', 0, 0, 'article', 4, 39, '2020-05-11 10:50:14');
INSERT INTO `tb_comment` VALUES (41, '11111', '小王', '', NULL, 0, 0, 'message', NULL, 0, '2020-05-11 10:50:38');
INSERT INTO `tb_comment` VALUES (42, '你好~', 'doubj', NULL, '张无忌', 1, 0, 'message', NULL, 1, '2020-05-11 10:53:11');
INSERT INTO `tb_comment` VALUES (43, '陈平安你好', 'doubj', NULL, '陈平安', 1, 0, 'message', NULL, 18, '2020-05-11 10:53:34');
INSERT INTO `tb_comment` VALUES (44, '1111', '小王', '', NULL, 0, 0, 'article', 4, 0, '2020-05-15 22:34:25');
INSERT INTO `tb_comment` VALUES (45, '评论一下', '啊啊啊', '', NULL, 0, 0, 'article', 4, 0, '2020-05-15 22:49:24');
INSERT INTO `tb_comment` VALUES (46, '小王你好', '啊啊啊啊', '', '小王', 0, 0, 'article', 4, 44, '2020-05-15 22:49:41');
INSERT INTO `tb_comment` VALUES (47, '你好哦', '啊啊啊啊啊啊啊', '', '啊啊啊', 0, 0, 'article', 4, 45, '2020-05-15 22:55:24');
INSERT INTO `tb_comment` VALUES (48, '你好~', 'doubj', NULL, '啊啊啊啊啊啊啊', 1, 0, 'message', NULL, 45, '2020-05-15 22:57:54');
INSERT INTO `tb_comment` VALUES (49, '啊啊啊', '版本', '', NULL, 0, 0, 'article', 4, 0, '2020-05-15 23:14:54');
INSERT INTO `tb_comment` VALUES (50, '你好哦', 'doubj', NULL, '版本', 1, 0, 'message', NULL, 49, '2020-05-15 23:17:04');
INSERT INTO `tb_comment` VALUES (51, '评论', '我', '', NULL, 0, 0, 'article', 4, 0, '2020-05-15 23:22:15');
INSERT INTO `tb_comment` VALUES (52, '你好博主', '他', '', 'doubj', 0, 1, 'article', 4, 49, '2020-05-15 23:22:27');
INSERT INTO `tb_comment` VALUES (53, '你好~', 'doubj', NULL, '他', 1, 0, 'message', NULL, 49, '2020-05-15 23:24:35');
INSERT INTO `tb_comment` VALUES (54, '111111', '啊啊啊', '', '版本', 0, 0, 'article', 4, 49, '2020-05-17 15:52:25');
INSERT INTO `tb_comment` VALUES (55, '随便留个言', '小5', NULL, NULL, 0, 0, 'message', NULL, 0, '2020-05-24 21:35:04');
INSERT INTO `tb_comment` VALUES (56, '随便留个言', '小4', NULL, NULL, 0, 0, 'article', 5, 0, '2020-05-24 21:37:01');

-- ----------------------------
-- Table structure for tb_link
-- ----------------------------
DROP TABLE IF EXISTS `tb_link`;
CREATE TABLE `tb_link`  (
  `link_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '友链表主键id',
  `link_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '网站名称',
  `link_url` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '网站链接',
  `avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '友链头像路径',
  PRIMARY KEY (`link_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_link
-- ----------------------------
INSERT INTO `tb_link` VALUES (1, 'keeperlee', 'https://keeperlee.github.io/111', 'https://newblog-1300278090.cos.ap-chengdu.myqcloud.com/avator/shanyi.png');
INSERT INTO `tb_link` VALUES (7, '7iny', 'https://7iny.jxustctf.top/', 'https://newblog-1300278090.cos.ap-chengdu.myqcloud.com/avator/shanyi.png');

-- ----------------------------
-- Table structure for tb_log
-- ----------------------------
DROP TABLE IF EXISTS `tb_log`;
CREATE TABLE `tb_log`  (
  `id` int(20) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `exception_detail` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `log_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `method` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `params` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `request_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `time` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 402 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_log
-- ----------------------------
INSERT INTO `tb_log` VALUES (2, '2020-04-26 11:32:14', '访问首页', 'BusinessException(code=404)\r\n	at com.guojunjie.springbootblog.service.impl.BlogServiceImpl.getBlogByQuery(BlogServiceImpl.java:598)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:205)\r\n	at com.sun.proxy.$Proxy121.getBlogByQuery(Unknown Source)\r\n	at com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery(MyBlogController.java:48)\r\n	at com.guojunjie.springbootblog.controller.blog.MyBlogController$$FastClassBySpringCGLIB$$dd401f7a.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.guojunjie.springbootblog.aspect.LogAspect.logAround(LogAspect.java:53)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)\r\n	at com.guojunjie.springbootblog.controller.blog.MyBlogController$$EnhancerBySpringCGLIB$$9be5614.getBlogByQuery(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', 'ERROR', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 4);
INSERT INTO `tb_log` VALUES (87, '2020-05-09 19:42:49', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (88, '2020-05-09 21:57:48', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 36);
INSERT INTO `tb_log` VALUES (89, '2020-05-09 22:56:45', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (90, '2020-05-09 23:07:58', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 16);
INSERT INTO `tb_log` VALUES (91, '2020-05-09 23:50:51', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (92, '2020-05-10 19:34:08', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 95);
INSERT INTO `tb_log` VALUES (93, '2020-05-10 20:58:24', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (94, '2020-05-10 20:58:27', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=1234567, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 16);
INSERT INTO `tb_log` VALUES (95, '2020-05-10 20:59:01', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=1234567, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (96, '2020-05-10 20:59:26', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (97, '2020-05-10 21:55:17', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 88);
INSERT INTO `tb_log` VALUES (98, '2020-05-10 23:02:56', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 17);
INSERT INTO `tb_log` VALUES (99, '2020-05-11 00:33:53', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 28);
INSERT INTO `tb_log` VALUES (100, '2020-05-11 00:33:53', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (101, '2020-05-11 00:33:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (102, '2020-05-11 00:49:03', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 90);
INSERT INTO `tb_log` VALUES (103, '2020-05-11 01:03:29', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (104, '2020-05-11 01:24:13', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 20);
INSERT INTO `tb_log` VALUES (105, '2020-05-11 01:24:13', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (106, '2020-05-11 01:24:14', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (107, '2020-05-11 01:30:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 22);
INSERT INTO `tb_log` VALUES (108, '2020-05-11 01:30:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (109, '2020-05-11 01:30:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (110, '2020-05-11 01:50:13', '修改密码', 'BusinessException(code=400)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl.updatePass(UserServiceImpl.java:54)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$62501c0b.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$dbdbef98.updatePass(<generated>)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController.updatePass(UserController.java:65)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$FastClassBySpringCGLIB$$10711102.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.guojunjie.springbootblog.aspect.LogAspect.logAround(LogAspect.java:51)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$EnhancerBySpringCGLIB$$5229a04f.updatePass(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', 'ERROR', 'com.guojunjie.springbootblog.controller.admin.UserController.updatePass()', '{ user: UserPassDTO(oldPass=12345, newPass=123456) request: org.apache.catalina.connector.RequestFacade@306305c1 }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (111, '2020-05-11 01:59:13', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 24);
INSERT INTO `tb_log` VALUES (112, '2020-05-11 01:59:14', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (113, '2020-05-11 01:59:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (114, '2020-05-11 02:01:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (115, '2020-05-11 02:01:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (116, '2020-05-11 02:01:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (117, '2020-05-11 02:01:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=项目, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (118, '2020-05-11 02:01:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=项目, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (119, '2020-05-11 02:01:21', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (120, '2020-05-11 02:01:22', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (121, '2020-05-11 02:01:23', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (122, '2020-05-11 02:01:58', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (123, '2020-05-11 02:01:58', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (124, '2020-05-11 02:02:08', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (125, '2020-05-11 02:03:08', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 4);
INSERT INTO `tb_log` VALUES (126, '2020-05-11 02:03:09', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (127, '2020-05-11 02:03:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (128, '2020-05-11 02:03:14', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (129, '2020-05-11 02:03:37', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (130, '2020-05-11 02:03:37', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (131, '2020-05-11 02:03:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (132, '2020-05-11 02:07:01', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (133, '2020-05-11 02:07:01', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (134, '2020-05-11 02:07:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (135, '2020-05-11 02:14:35', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 21);
INSERT INTO `tb_log` VALUES (136, '2020-05-11 02:14:35', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 19);
INSERT INTO `tb_log` VALUES (137, '2020-05-11 02:14:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (138, '2020-05-11 09:48:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 32);
INSERT INTO `tb_log` VALUES (139, '2020-05-11 09:48:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 14);
INSERT INTO `tb_log` VALUES (140, '2020-05-11 09:49:00', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (141, '2020-05-11 09:49:25', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 13);
INSERT INTO `tb_log` VALUES (142, '2020-05-11 09:49:25', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (143, '2020-05-11 09:49:28', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (144, '2020-05-11 09:51:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Sorting, Redis]) }', '0:0:0:0:0:0:0:1', 13);
INSERT INTO `tb_log` VALUES (145, '2020-05-11 09:51:14', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Sorting]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (146, '2020-05-11 09:51:14', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Sorting]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (147, '2020-05-11 09:51:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (148, '2020-05-11 09:51:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (149, '2020-05-11 09:51:21', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (150, '2020-05-11 10:00:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 32);
INSERT INTO `tb_log` VALUES (151, '2020-05-11 10:00:33', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 11);
INSERT INTO `tb_log` VALUES (152, '2020-05-11 10:00:33', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (153, '2020-05-11 10:03:10', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 12);
INSERT INTO `tb_log` VALUES (154, '2020-05-11 10:03:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (155, '2020-05-11 10:03:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (156, '2020-05-11 10:05:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 25);
INSERT INTO `tb_log` VALUES (157, '2020-05-11 10:05:17', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (158, '2020-05-11 10:05:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (159, '2020-05-11 10:11:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 14);
INSERT INTO `tb_log` VALUES (160, '2020-05-11 10:11:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (161, '2020-05-11 10:14:57', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (162, '2020-05-11 10:15:33', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 15);
INSERT INTO `tb_log` VALUES (163, '2020-05-11 10:15:33', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 12);
INSERT INTO `tb_log` VALUES (164, '2020-05-11 10:15:34', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (165, '2020-05-11 10:15:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (166, '2020-05-11 10:15:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (167, '2020-05-11 10:15:39', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (168, '2020-05-11 10:17:01', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 8);
INSERT INTO `tb_log` VALUES (169, '2020-05-11 10:17:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (170, '2020-05-11 10:17:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (171, '2020-05-11 10:17:10', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (172, '2020-05-11 10:20:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (173, '2020-05-11 10:20:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (174, '2020-05-11 10:20:17', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (175, '2020-05-11 10:22:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (176, '2020-05-11 10:22:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (177, '2020-05-11 10:22:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (178, '2020-05-11 10:22:33', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=项目, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (179, '2020-05-11 10:22:33', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=项目, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (180, '2020-05-11 10:22:35', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 11);
INSERT INTO `tb_log` VALUES (181, '2020-05-11 10:22:35', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (182, '2020-05-11 10:22:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (183, '2020-05-11 10:23:37', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 5);
INSERT INTO `tb_log` VALUES (184, '2020-05-11 10:23:37', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (185, '2020-05-11 10:23:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (186, '2020-05-11 10:24:27', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 88);
INSERT INTO `tb_log` VALUES (187, '2020-05-11 10:25:06', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (188, '2020-05-11 10:25:06', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (189, '2020-05-11 10:25:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (190, '2020-05-11 10:25:19', '修改密码', 'BusinessException(code=400)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl.updatePass(UserServiceImpl.java:55)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$62501c0b.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$9b95c94.updatePass(<generated>)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController.updatePass(UserController.java:65)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$FastClassBySpringCGLIB$$10711102.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.guojunjie.springbootblog.aspect.LogAspect.logAround(LogAspect.java:51)\r\n	at sun.reflect.GeneratedMethodAccessor156.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$EnhancerBySpringCGLIB$$c3211de1.updatePass(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', 'ERROR', 'com.guojunjie.springbootblog.controller.admin.UserController.updatePass()', '{ user: UserPassDTO(oldPass=12345, newPass=1234567) request: org.apache.catalina.connector.RequestFacade@69ff3f4f }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (191, '2020-05-11 10:27:21', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (192, '2020-05-11 10:27:21', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (193, '2020-05-11 10:27:22', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 1);
INSERT INTO `tb_log` VALUES (194, '2020-05-11 10:30:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (195, '2020-05-11 10:30:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (196, '2020-05-11 10:30:08', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (197, '2020-05-11 10:30:48', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (198, '2020-05-11 10:30:48', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (199, '2020-05-11 10:32:10', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 32);
INSERT INTO `tb_log` VALUES (200, '2020-05-11 10:32:10', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 13);
INSERT INTO `tb_log` VALUES (201, '2020-05-11 10:32:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 22);
INSERT INTO `tb_log` VALUES (202, '2020-05-11 10:32:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (203, '2020-05-11 10:33:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 22);
INSERT INTO `tb_log` VALUES (204, '2020-05-11 10:33:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (205, '2020-05-11 10:33:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 21);
INSERT INTO `tb_log` VALUES (206, '2020-05-11 10:33:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (207, '2020-05-11 10:33:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 16);
INSERT INTO `tb_log` VALUES (208, '2020-05-11 10:33:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (209, '2020-05-11 10:34:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 12);
INSERT INTO `tb_log` VALUES (210, '2020-05-11 10:34:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (211, '2020-05-11 10:34:43', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 11);
INSERT INTO `tb_log` VALUES (212, '2020-05-11 10:34:43', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (213, '2020-05-11 10:34:45', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (214, '2020-05-11 10:34:45', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (215, '2020-05-11 10:34:55', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (216, '2020-05-11 10:34:55', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (217, '2020-05-11 10:35:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (218, '2020-05-11 10:35:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (219, '2020-05-11 10:35:27', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (220, '2020-05-11 10:35:27', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (221, '2020-05-11 10:35:46', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (222, '2020-05-11 10:35:46', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (223, '2020-05-11 10:35:47', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (224, '2020-05-11 10:35:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (225, '2020-05-11 10:35:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (226, '2020-05-11 10:36:01', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (227, '2020-05-11 10:36:01', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (228, '2020-05-11 10:36:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (229, '2020-05-11 10:36:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (230, '2020-05-11 10:36:23', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (231, '2020-05-11 10:36:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (232, '2020-05-11 10:36:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (233, '2020-05-11 10:36:50', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (234, '2020-05-11 10:36:50', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (235, '2020-05-11 10:36:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (236, '2020-05-11 10:38:00', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (237, '2020-05-11 10:38:00', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (238, '2020-05-11 10:38:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (239, '2020-05-11 10:38:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (240, '2020-05-11 10:38:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (241, '2020-05-11 10:38:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (242, '2020-05-11 10:38:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (243, '2020-05-11 10:38:23', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (244, '2020-05-11 10:39:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 5);
INSERT INTO `tb_log` VALUES (245, '2020-05-11 10:39:52', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (246, '2020-05-11 10:39:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (247, '2020-05-11 10:40:19', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 76);
INSERT INTO `tb_log` VALUES (248, '2020-05-11 10:40:45', '修改密码', 'BusinessException(code=400)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl.updatePass(UserServiceImpl.java:55)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$62501c0b.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$1dff564b.updatePass(<generated>)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController.updatePass(UserController.java:65)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$FastClassBySpringCGLIB$$10711102.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.guojunjie.springbootblog.aspect.LogAspect.logAround(LogAspect.java:51)\r\n	at sun.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$EnhancerBySpringCGLIB$$7892060.updatePass(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', 'ERROR', 'com.guojunjie.springbootblog.controller.admin.UserController.updatePass()', '{ user: UserPassDTO(oldPass=12345, newPass=123456) request: org.apache.catalina.connector.RequestFacade@2720325c }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (249, '2020-05-11 10:41:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (250, '2020-05-11 10:41:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (251, '2020-05-11 10:43:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (252, '2020-05-11 10:43:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (253, '2020-05-11 10:43:06', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (254, '2020-05-11 10:43:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (255, '2020-05-11 10:43:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (256, '2020-05-11 10:43:17', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (257, '2020-05-11 10:43:17', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (258, '2020-05-11 10:43:24', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (259, '2020-05-11 10:44:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 7);
INSERT INTO `tb_log` VALUES (260, '2020-05-11 10:44:16', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (261, '2020-05-11 10:44:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (262, '2020-05-11 10:45:00', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (263, '2020-05-11 10:45:25', '修改密码', 'BusinessException(code=400)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl.updatePass(UserServiceImpl.java:55)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$62501c0b.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$1dff564b.updatePass(<generated>)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController.updatePass(UserController.java:65)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$FastClassBySpringCGLIB$$10711102.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.guojunjie.springbootblog.aspect.LogAspect.logAround(LogAspect.java:51)\r\n	at sun.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$EnhancerBySpringCGLIB$$7892060.updatePass(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', 'ERROR', 'com.guojunjie.springbootblog.controller.admin.UserController.updatePass()', '{ user: UserPassDTO(oldPass=1234, newPass=123456) request: org.apache.catalina.connector.RequestFacade@2720325c }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (264, '2020-05-11 10:49:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (265, '2020-05-11 10:49:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (266, '2020-05-11 10:49:15', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (267, '2020-05-11 10:49:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (268, '2020-05-11 10:49:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[Java]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (269, '2020-05-11 10:49:22', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (270, '2020-05-11 10:49:23', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (271, '2020-05-11 10:49:23', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (272, '2020-05-11 10:50:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 7);
INSERT INTO `tb_log` VALUES (273, '2020-05-11 10:50:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (274, '2020-05-11 10:50:22', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (275, '2020-05-11 10:50:25', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (276, '2020-05-11 10:51:02', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (277, '2020-05-13 18:12:35', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 123);
INSERT INTO `tb_log` VALUES (278, '2020-05-13 18:17:40', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (279, '2020-05-13 18:18:18', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (280, '2020-05-13 18:21:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 45);
INSERT INTO `tb_log` VALUES (281, '2020-05-13 18:21:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 33);
INSERT INTO `tb_log` VALUES (282, '2020-05-13 18:21:23', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (283, '2020-05-14 11:36:49', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 331);
INSERT INTO `tb_log` VALUES (284, '2020-05-14 13:40:31', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 66);
INSERT INTO `tb_log` VALUES (285, '2020-05-14 16:15:36', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 111);
INSERT INTO `tb_log` VALUES (286, '2020-05-14 16:30:41', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 110);
INSERT INTO `tb_log` VALUES (287, '2020-05-14 21:01:58', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 27);
INSERT INTO `tb_log` VALUES (288, '2020-05-14 23:05:24', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 15);
INSERT INTO `tb_log` VALUES (289, '2020-05-15 08:47:31', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 408);
INSERT INTO `tb_log` VALUES (290, '2020-05-15 10:50:56', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 27);
INSERT INTO `tb_log` VALUES (291, '2020-05-15 19:34:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 44);
INSERT INTO `tb_log` VALUES (292, '2020-05-15 19:34:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 12);
INSERT INTO `tb_log` VALUES (293, '2020-05-15 19:41:45', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (294, '2020-05-15 20:09:55', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 167);
INSERT INTO `tb_log` VALUES (295, '2020-05-15 22:33:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 98);
INSERT INTO `tb_log` VALUES (296, '2020-05-15 22:33:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 16);
INSERT INTO `tb_log` VALUES (297, '2020-05-15 22:33:55', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (298, '2020-05-15 22:48:24', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (299, '2020-05-15 22:48:24', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (300, '2020-05-15 22:48:40', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (301, '2020-05-15 22:50:05', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 189);
INSERT INTO `tb_log` VALUES (302, '2020-05-15 22:54:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (303, '2020-05-15 22:54:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (304, '2020-05-15 22:54:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (305, '2020-05-15 22:55:45', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (306, '2020-05-15 22:58:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (307, '2020-05-15 22:58:02', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (308, '2020-05-15 23:00:57', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (309, '2020-05-15 23:00:57', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (310, '2020-05-15 23:01:16', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (311, '2020-05-15 23:01:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (312, '2020-05-15 23:01:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (313, '2020-05-15 23:14:17', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (314, '2020-05-15 23:14:18', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=4, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (315, '2020-05-15 23:15:14', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (316, '2020-05-15 23:21:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (317, '2020-05-15 23:21:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (318, '2020-05-15 23:21:40', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 2);
INSERT INTO `tb_log` VALUES (319, '2020-05-15 23:22:50', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (320, '2020-05-15 23:30:30', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 11);
INSERT INTO `tb_log` VALUES (321, '2020-05-15 23:30:30', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (322, '2020-05-15 23:30:37', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (323, '2020-05-15 23:31:36', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (324, '2020-05-15 23:49:03', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (325, '2020-05-15 23:49:04', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (326, '2020-05-15 23:49:06', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (327, '2020-05-16 00:05:32', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (328, '2020-05-16 00:59:40', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (329, '2020-05-16 00:59:40', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (330, '2020-05-16 20:53:34', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 181);
INSERT INTO `tb_log` VALUES (331, '2020-05-17 09:01:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 31);
INSERT INTO `tb_log` VALUES (332, '2020-05-17 09:01:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (333, '2020-05-17 09:01:44', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (334, '2020-05-17 09:19:53', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 94);
INSERT INTO `tb_log` VALUES (335, '2020-05-17 11:19:13', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 39);
INSERT INTO `tb_log` VALUES (336, '2020-05-17 11:20:40', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (337, '2020-05-17 11:21:07', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (338, '2020-05-17 14:46:20', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 34);
INSERT INTO `tb_log` VALUES (339, '2020-05-17 14:46:24', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 15);
INSERT INTO `tb_log` VALUES (340, '2020-05-17 14:46:24', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (341, '2020-05-17 14:46:27', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=Java, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (342, '2020-05-17 14:46:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (343, '2020-05-17 14:46:29', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (344, '2020-05-17 14:46:35', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=分类, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (345, '2020-05-17 14:46:35', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=分类, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (346, '2020-05-17 14:46:39', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (347, '2020-05-17 14:46:44', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 15);
INSERT INTO `tb_log` VALUES (348, '2020-05-17 14:46:44', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (349, '2020-05-17 14:46:47', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (350, '2020-05-17 14:46:47', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 8);
INSERT INTO `tb_log` VALUES (351, '2020-05-17 14:46:58', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (352, '2020-05-17 14:47:05', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (353, '2020-05-17 15:50:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 62);
INSERT INTO `tb_log` VALUES (354, '2020-05-17 15:50:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (355, '2020-05-17 15:50:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=Java, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 19);
INSERT INTO `tb_log` VALUES (356, '2020-05-17 15:50:32', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=Java, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (357, '2020-05-17 15:50:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 10);
INSERT INTO `tb_log` VALUES (358, '2020-05-17 15:50:38', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 17);
INSERT INTO `tb_log` VALUES (359, '2020-05-17 15:50:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=新的分类, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (360, '2020-05-17 15:50:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=新的分类, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (361, '2020-05-17 15:50:43', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (362, '2020-05-17 15:50:43', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (363, '2020-05-17 15:50:54', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (364, '2020-05-17 15:52:41', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 5);
INSERT INTO `tb_log` VALUES (365, '2020-05-17 15:52:42', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (366, '2020-05-17 15:52:45', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 4);
INSERT INTO `tb_log` VALUES (367, '2020-05-17 15:53:53', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 23);
INSERT INTO `tb_log` VALUES (368, '2020-05-17 15:54:15', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (369, '2020-05-17 15:55:13', '修改密码', 'BusinessException(code=400)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl.updatePass(UserServiceImpl.java:55)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$62501c0b.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)\r\n	at com.guojunjie.springbootblog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$dbecac85.updatePass(<generated>)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController.updatePass(UserController.java:65)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$FastClassBySpringCGLIB$$10711102.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.guojunjie.springbootblog.aspect.LogAspect.logAround(LogAspect.java:51)\r\n	at sun.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)\r\n	at com.guojunjie.springbootblog.controller.admin.UserController$$EnhancerBySpringCGLIB$$be3aa2bb.updatePass(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', 'ERROR', 'com.guojunjie.springbootblog.controller.admin.UserController.updatePass()', '{ user: UserPassDTO(oldPass=1233456, newPass=123456) request: org.apache.catalina.connector.RequestFacade@1d356a30 }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (370, '2020-05-24 12:03:44', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 92);
INSERT INTO `tb_log` VALUES (371, '2020-05-24 13:09:10', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 40);
INSERT INTO `tb_log` VALUES (372, '2020-05-24 13:20:31', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 37);
INSERT INTO `tb_log` VALUES (373, '2020-05-24 13:21:09', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 27);
INSERT INTO `tb_log` VALUES (374, '2020-05-24 13:21:09', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 28);
INSERT INTO `tb_log` VALUES (375, '2020-05-24 13:21:22', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (376, '2020-05-24 13:59:46', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 62);
INSERT INTO `tb_log` VALUES (377, '2020-05-24 13:59:47', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 11);
INSERT INTO `tb_log` VALUES (378, '2020-05-24 14:01:03', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 15);
INSERT INTO `tb_log` VALUES (379, '2020-05-24 14:01:03', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 16);
INSERT INTO `tb_log` VALUES (380, '2020-05-24 14:01:07', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (381, '2020-05-24 14:01:09', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 31);
INSERT INTO `tb_log` VALUES (382, '2020-05-24 14:01:09', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (383, '2020-05-24 14:01:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 14);
INSERT INTO `tb_log` VALUES (384, '2020-05-24 14:01:11', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 14);
INSERT INTO `tb_log` VALUES (385, '2020-05-24 14:01:12', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 17);
INSERT INTO `tb_log` VALUES (386, '2020-05-24 14:01:36', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 6);
INSERT INTO `tb_log` VALUES (387, '2020-05-24 14:01:37', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (388, '2020-05-24 14:01:41', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (389, '2020-05-24 14:05:45', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 13);
INSERT INTO `tb_log` VALUES (390, '2020-05-24 14:05:45', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (391, '2020-05-24 14:05:51', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 7);
INSERT INTO `tb_log` VALUES (392, '2020-05-24 14:05:53', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 12);
INSERT INTO `tb_log` VALUES (393, '2020-05-24 14:05:53', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[ElasticSearch]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (394, '2020-05-24 14:05:55', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 14);
INSERT INTO `tb_log` VALUES (395, '2020-05-24 14:05:55', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 6);
INSERT INTO `tb_log` VALUES (396, '2020-05-24 14:05:57', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=3, limit=6, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 3);
INSERT INTO `tb_log` VALUES (397, '2020-05-24 14:06:16', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '192.168.204.1', 9);
INSERT INTO `tb_log` VALUES (398, '2020-05-24 14:06:17', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=1, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 9);
INSERT INTO `tb_log` VALUES (399, '2020-05-24 14:06:19', '访问首页', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.blog.MyBlogController.getBlogByQuery()', '{ blogListQuery: BlogListQuery(page=2, limit=3, blogCategoryName=, blogTags=[]) }', '0:0:0:0:0:0:0:1', 5);
INSERT INTO `tb_log` VALUES (400, '2020-05-24 16:08:45', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 46);
INSERT INTO `tb_log` VALUES (401, '2020-05-24 21:43:03', '请求登录', NULL, 'INFO', 'com.guojunjie.springbootblog.controller.admin.UserController.Login()', '{ user: User(userId=null, userName=admin, password=123456, nickName=null, avatar=null, introduce=null, roles=null) }', '0:0:0:0:0:0:0:1', 90);

-- ----------------------------
-- Table structure for tb_user
-- ----------------------------
DROP TABLE IF EXISTS `tb_user`;
CREATE TABLE `tb_user`  (
  `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `user_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '登录账号',
  `password` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '登录密码',
  `nick_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '头像路径',
  `introduce` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '介绍',
  `roles` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色',
  PRIMARY KEY (`user_id`) USING BTREE,
  UNIQUE INDEX `user_name`(`user_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_user
-- ----------------------------
INSERT INTO `tb_user` VALUES (1, 'admin', '123456', 'doubj', 'https://obs-myblog.obs.cn-south-1.myhuaweicloud.com/myavatar/C45734EBD47D7143E66CBC5B10F76F06.jpg', 'Anime,Coder,Gamer', 'admin');

SET FOREIGN_KEY_CHECKS = 1;
